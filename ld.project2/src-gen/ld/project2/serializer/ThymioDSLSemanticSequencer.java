/*
 * generated by Xtext 2.34.0
 */
package ld.project2.serializer;

import com.google.inject.Inject;
import java.util.Set;
import ld.project2.services.ThymioDSLGrammarAccess;
import ld.project2.thymioDSL.Addition;
import ld.project2.thymioDSL.Event;
import ld.project2.thymioDSL.Expression;
import ld.project2.thymioDSL.Model;
import ld.project2.thymioDSL.Motor;
import ld.project2.thymioDSL.Multiplication;
import ld.project2.thymioDSL.Procedure;
import ld.project2.thymioDSL.Sensor;
import ld.project2.thymioDSL.Sound;
import ld.project2.thymioDSL.ThymioDSLPackage;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ThymioDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ThymioDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ThymioDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ThymioDSLPackage.ACTION:
				sequence_Action(context, (ld.project2.thymioDSL.Action) semanticObject); 
				return; 
			case ThymioDSLPackage.ADDITION:
				sequence_Addition(context, (Addition) semanticObject); 
				return; 
			case ThymioDSLPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case ThymioDSLPackage.EXPRESSION:
				sequence_Primary(context, (Expression) semanticObject); 
				return; 
			case ThymioDSLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ThymioDSLPackage.MOTOR:
				sequence_Motor(context, (Motor) semanticObject); 
				return; 
			case ThymioDSLPackage.MULTIPLICATION:
				sequence_Multiplication(context, (Multiplication) semanticObject); 
				return; 
			case ThymioDSLPackage.PROCEDURE:
				sequence_Procedure(context, (Procedure) semanticObject); 
				return; 
			case ThymioDSLPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case ThymioDSLPackage.SOUND:
				sequence_Sound(context, (Sound) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (move=Motor topLight=OnOff bottomLight=OnOff sound+=Sound)
	 * </pre>
	 */
	protected void sequence_Action(ISerializationContext context, ld.project2.thymioDSL.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Addition returns Addition
	 *     Addition.Addition_1_0 returns Addition
	 *     Multiplication returns Addition
	 *     Multiplication.Multiplication_1_0 returns Addition
	 *     Primary returns Addition
	 *
	 * Constraint:
	 *     (left=Addition_Addition_1_0 right=Multiplication)
	 * </pre>
	 */
	protected void sequence_Addition(ISerializationContext context, Addition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ThymioDSLPackage.Literals.EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ThymioDSLPackage.Literals.EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, ThymioDSLPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ThymioDSLPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (button=Ortogonal? tap=EBoolean? mic=EBoolean? sensor+=Sensor?)
	 * </pre>
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     procedures+=Procedure+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Motor returns Motor
	 *
	 * Constraint:
	 *     (left=Addition right=Addition)
	 * </pre>
	 */
	protected void sequence_Motor(ISerializationContext context, Motor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ThymioDSLPackage.Literals.MOTOR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ThymioDSLPackage.Literals.MOTOR__LEFT));
			if (transientValues.isValueTransient(semanticObject, ThymioDSLPackage.Literals.MOTOR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ThymioDSLPackage.Literals.MOTOR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMotorAccess().getLeftAdditionParserRuleCall_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMotorAccess().getRightAdditionParserRuleCall_4_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Addition returns Multiplication
	 *     Addition.Addition_1_0 returns Multiplication
	 *     Multiplication returns Multiplication
	 *     Multiplication.Multiplication_1_0 returns Multiplication
	 *     Primary returns Multiplication
	 *
	 * Constraint:
	 *     (left=Multiplication_Multiplication_1_0 right=Primary)
	 * </pre>
	 */
	protected void sequence_Multiplication(ISerializationContext context, Multiplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ThymioDSLPackage.Literals.EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ThymioDSLPackage.Literals.EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, ThymioDSLPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ThymioDSLPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Addition returns Expression
	 *     Addition.Addition_1_0 returns Expression
	 *     Multiplication returns Expression
	 *     Multiplication.Multiplication_1_0 returns Expression
	 *     Primary returns Expression
	 *
	 * Constraint:
	 *     value=EInt
	 * </pre>
	 */
	protected void sequence_Primary(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ThymioDSLPackage.Literals.EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ThymioDSLPackage.Literals.EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueEIntParserRuleCall_0_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Procedure returns Procedure
	 *
	 * Constraint:
	 *     (name=EString events+=Event actions+=Action+)
	 * </pre>
	 */
	protected void sequence_Procedure(ISerializationContext context, Procedure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (
	 *         bottomLeftSensor=BlackWhite? 
	 *         bottomRightSensor=BlackWhite? 
	 *         northWest=SensorStatus? 
	 *         northNorthWest=SensorStatus? 
	 *         north=SensorStatus? 
	 *         northNorthEast=SensorStatus? 
	 *         northEast=SensorStatus?
	 *     )
	 * </pre>
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sound returns Sound
	 *
	 * Constraint:
	 *     (pitch+=Addition duration+=NoteDuration (pitch+=Addition duration+=NoteDuration)*)
	 * </pre>
	 */
	protected void sequence_Sound(ISerializationContext context, Sound semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
