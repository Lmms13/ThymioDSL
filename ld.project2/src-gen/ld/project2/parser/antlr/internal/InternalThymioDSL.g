/*
 * generated by Xtext 2.34.0
 */
grammar InternalThymioDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ld.project2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ld.project2.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ld.project2.services.ThymioDSLGrammarAccess;

}

@parser::members {

 	private ThymioDSLGrammarAccess grammarAccess;

    public InternalThymioDSLParser(TokenStream input, ThymioDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ThymioDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getProceduresProcedureParserRuleCall_0());
			}
			lv_procedures_0_0=ruleProcedure
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"procedures",
					lv_procedures_0_0,
					"ld.project2.ThymioDSL.Procedure");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	iv_ruleProcedure=ruleProcedure
	{ $current=$iv_ruleProcedure.current; }
	EOF;

// Rule Procedure
ruleProcedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Procedure:'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcedureAccess().getProcedureKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"ld.project2.ThymioDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='Event:'
		{
			newLeafNode(otherlv_2, grammarAccess.getProcedureAccess().getEventKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureAccess().getEventsEventParserRuleCall_3_0());
				}
				lv_events_3_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureRule());
					}
					add(
						$current,
						"events",
						lv_events_3_0,
						"ld.project2.ThymioDSL.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='Actions:'
		{
			newLeafNode(otherlv_4, grammarAccess.getProcedureAccess().getActionsKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureAccess().getActionsActionParserRuleCall_5_0());
				}
				lv_actions_5_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureRule());
					}
					add(
						$current,
						"actions",
						lv_actions_5_0,
						"ld.project2.ThymioDSL.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEventAccess().getEventAction_0(),
					$current);
			}
		)
		otherlv_1='when:'
		{
			newLeafNode(otherlv_1, grammarAccess.getEventAccess().getWhenKeyword_1());
		}
		(
			otherlv_2='button_is_clicked:'
			{
				newLeafNode(otherlv_2, grammarAccess.getEventAccess().getButton_is_clickedKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEventAccess().getButtonOrtogonalParserRuleCall_2_1_0());
					}
					lv_button_3_0=ruleOrtogonal
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventRule());
						}
						set(
							$current,
							"button",
							lv_button_3_0,
							"ld.project2.ThymioDSL.Ortogonal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_4='robot_is_tapped:'
			{
				newLeafNode(otherlv_4, grammarAccess.getEventAccess().getRobot_is_tappedKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEventAccess().getTapEBooleanParserRuleCall_3_1_0());
					}
					lv_tap_5_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventRule());
						}
						set(
							$current,
							"tap",
							lv_tap_5_0,
							"ld.project2.ThymioDSL.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='sound_is_detected:'
			{
				newLeafNode(otherlv_6, grammarAccess.getEventAccess().getSound_is_detectedKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEventAccess().getMicEBooleanParserRuleCall_4_1_0());
					}
					lv_mic_7_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventRule());
						}
						set(
							$current,
							"mic",
							lv_mic_7_0,
							"ld.project2.ThymioDSL.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='sensor_is_activated:'
			{
				newLeafNode(otherlv_8, grammarAccess.getEventAccess().getSensor_is_activatedKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEventAccess().getSensorSensorParserRuleCall_5_1_0());
					}
					lv_sensor_9_0=ruleSensor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventRule());
						}
						add(
							$current,
							"sensor",
							lv_sensor_9_0,
							"ld.project2.ThymioDSL.Sensor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	iv_ruleSensor=ruleSensor
	{ $current=$iv_ruleSensor.current; }
	EOF;

// Rule Sensor
ruleSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSensorAccess().getSensorAction_0(),
					$current);
			}
		)
		(
			otherlv_1='bottom_left:'
			{
				newLeafNode(otherlv_1, grammarAccess.getSensorAccess().getBottom_leftKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorAccess().getBottomLeftSensorBlackWhiteParserRuleCall_1_1_0());
					}
					lv_bottomLeftSensor_2_0=ruleBlackWhite
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorRule());
						}
						set(
							$current,
							"bottomLeftSensor",
							lv_bottomLeftSensor_2_0,
							"ld.project2.ThymioDSL.BlackWhite");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_3='bottom_right:'
			{
				newLeafNode(otherlv_3, grammarAccess.getSensorAccess().getBottom_rightKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorAccess().getBottomRightSensorBlackWhiteParserRuleCall_2_1_0());
					}
					lv_bottomRightSensor_4_0=ruleBlackWhite
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorRule());
						}
						set(
							$current,
							"bottomRightSensor",
							lv_bottomRightSensor_4_0,
							"ld.project2.ThymioDSL.BlackWhite");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='northwest:'
			{
				newLeafNode(otherlv_5, grammarAccess.getSensorAccess().getNorthwestKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorAccess().getNorthWestSensorStatusParserRuleCall_3_1_0());
					}
					lv_northWest_6_0=ruleSensorStatus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorRule());
						}
						set(
							$current,
							"northWest",
							lv_northWest_6_0,
							"ld.project2.ThymioDSL.SensorStatus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='northnorthwest:'
			{
				newLeafNode(otherlv_7, grammarAccess.getSensorAccess().getNorthnorthwestKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorAccess().getNorthNorthWestSensorStatusParserRuleCall_4_1_0());
					}
					lv_northNorthWest_8_0=ruleSensorStatus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorRule());
						}
						set(
							$current,
							"northNorthWest",
							lv_northNorthWest_8_0,
							"ld.project2.ThymioDSL.SensorStatus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_9='north:'
			{
				newLeafNode(otherlv_9, grammarAccess.getSensorAccess().getNorthKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorAccess().getNorthSensorStatusParserRuleCall_5_1_0());
					}
					lv_north_10_0=ruleSensorStatus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorRule());
						}
						set(
							$current,
							"north",
							lv_north_10_0,
							"ld.project2.ThymioDSL.SensorStatus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_11='northnortheast:'
			{
				newLeafNode(otherlv_11, grammarAccess.getSensorAccess().getNorthnortheastKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorAccess().getNorthNorthEastSensorStatusParserRuleCall_6_1_0());
					}
					lv_northNorthEast_12_0=ruleSensorStatus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorRule());
						}
						set(
							$current,
							"northNorthEast",
							lv_northNorthEast_12_0,
							"ld.project2.ThymioDSL.SensorStatus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_13='northeast:'
			{
				newLeafNode(otherlv_13, grammarAccess.getSensorAccess().getNortheastKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorAccess().getNorthEastSensorStatusParserRuleCall_7_1_0());
					}
					lv_northEast_14_0=ruleSensorStatus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorRule());
						}
						set(
							$current,
							"northEast",
							lv_northEast_14_0,
							"ld.project2.ThymioDSL.SensorStatus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='move:'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionAccess().getMoveKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getMoveMotorParserRuleCall_1_0());
				}
				lv_move_1_0=ruleMotor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"move",
						lv_move_1_0,
						"ld.project2.ThymioDSL.Motor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='toplight:'
		{
			newLeafNode(otherlv_2, grammarAccess.getActionAccess().getToplightKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getTopLightOnOffParserRuleCall_3_0());
				}
				lv_topLight_3_0=ruleOnOff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"topLight",
						lv_topLight_3_0,
						"ld.project2.ThymioDSL.OnOff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='bottomlight:'
		{
			newLeafNode(otherlv_4, grammarAccess.getActionAccess().getBottomlightKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getBottomLightOnOffParserRuleCall_5_0());
				}
				lv_bottomLight_5_0=ruleOnOff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"bottomLight",
						lv_bottomLight_5_0,
						"ld.project2.ThymioDSL.OnOff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='sound:'
		{
			newLeafNode(otherlv_6, grammarAccess.getActionAccess().getSoundKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getSoundSoundParserRuleCall_7_0());
				}
				lv_sound_7_0=ruleSound
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					add(
						$current,
						"sound",
						lv_sound_7_0,
						"ld.project2.ThymioDSL.Sound");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMotor
entryRuleMotor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMotorRule()); }
	iv_ruleMotor=ruleMotor
	{ $current=$iv_ruleMotor.current; }
	EOF;

// Rule Motor
ruleMotor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='motors:'
		{
			newLeafNode(otherlv_0, grammarAccess.getMotorAccess().getMotorsKeyword_0());
		}
		otherlv_1='left:'
		{
			newLeafNode(otherlv_1, grammarAccess.getMotorAccess().getLeftKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMotorAccess().getLeftAdditionParserRuleCall_2_0());
				}
				lv_left_2_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMotorRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"ld.project2.ThymioDSL.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='right:'
		{
			newLeafNode(otherlv_3, grammarAccess.getMotorAccess().getRightKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMotorAccess().getRightAdditionParserRuleCall_4_0());
				}
				lv_right_4_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMotorRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"ld.project2.ThymioDSL.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSound
entryRuleSound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSoundRule()); }
	iv_ruleSound=ruleSound
	{ $current=$iv_ruleSound.current; }
	EOF;

// Rule Sound
ruleSound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Note'
		{
			newLeafNode(otherlv_0, grammarAccess.getSoundAccess().getNoteKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSoundAccess().getPitchAdditionParserRuleCall_1_0());
				}
				lv_pitch_1_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoundRule());
					}
					add(
						$current,
						"pitch",
						lv_pitch_1_0,
						"ld.project2.ThymioDSL.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSoundAccess().getDurationNoteDurationParserRuleCall_2_0());
				}
				lv_duration_2_0=ruleNoteDuration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoundRule());
					}
					add(
						$current,
						"duration",
						lv_duration_2_0,
						"ld.project2.ThymioDSL.NoteDuration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='Note'
			{
				newLeafNode(otherlv_3, grammarAccess.getSoundAccess().getNoteKeyword_3_0());
			}
			otherlv_4='Pitch:'
			{
				newLeafNode(otherlv_4, grammarAccess.getSoundAccess().getPitchKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSoundAccess().getPitchAdditionParserRuleCall_3_2_0());
					}
					lv_pitch_5_0=ruleAddition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSoundRule());
						}
						add(
							$current,
							"pitch",
							lv_pitch_5_0,
							"ld.project2.ThymioDSL.Addition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSoundAccess().getDurationNoteDurationParserRuleCall_3_3_0());
					}
					lv_duration_6_0=ruleNoteDuration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSoundRule());
						}
						add(
							$current,
							"duration",
							lv_duration_6_0,
							"ld.project2.ThymioDSL.NoteDuration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleOnOff
entryRuleOnOff returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOnOffRule()); }
	iv_ruleOnOff=ruleOnOff
	{ $current=$iv_ruleOnOff.current.getText(); }
	EOF;

// Rule OnOff
ruleOnOff returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='on'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOnOffAccess().getOnKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getOnOffAccess().getRBGParserRuleCall_0_1());
			}
			this_RBG_1=ruleRBG
			{
				$current.merge(this_RBG_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		kw='off'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOnOffAccess().getOffKeyword_1());
		}
	)
;

// Entry rule entryRuleRBG
entryRuleRBG returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRBGRule()); }
	iv_ruleRBG=ruleRBG
	{ $current=$iv_ruleRBG.current.getText(); }
	EOF;

// Rule RBG
ruleRBG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRBGAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getRBGAccess().getEIntParserRuleCall_1());
		}
		this_EInt_1=ruleEInt
		{
			$current.merge(this_EInt_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRBGAccess().getCommaKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getRBGAccess().getEIntParserRuleCall_3());
		}
		this_EInt_3=ruleEInt
		{
			$current.merge(this_EInt_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRBGAccess().getCommaKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getRBGAccess().getEIntParserRuleCall_5());
		}
		this_EInt_5=ruleEInt
		{
			$current.merge(this_EInt_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRBGAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleNoteDuration
entryRuleNoteDuration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNoteDurationRule()); }
	iv_ruleNoteDuration=ruleNoteDuration
	{ $current=$iv_ruleNoteDuration.current.getText(); }
	EOF;

// Rule NoteDuration
ruleNoteDuration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='short'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNoteDurationAccess().getShortKeyword_0());
		}
		    |
		kw='long'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNoteDurationAccess().getLongKeyword_1());
		}
	)
;

// Entry rule entryRuleOrtogonal
entryRuleOrtogonal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOrtogonalRule()); }
	iv_ruleOrtogonal=ruleOrtogonal
	{ $current=$iv_ruleOrtogonal.current.getText(); }
	EOF;

// Rule Ortogonal
ruleOrtogonal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='up'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOrtogonalAccess().getUpKeyword_0());
		}
		    |
		kw='down'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOrtogonalAccess().getDownKeyword_1());
		}
		    |
		kw='left'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOrtogonalAccess().getLeftKeyword_2());
		}
		    |
		kw='right'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOrtogonalAccess().getRightKeyword_3());
		}
		    |
		kw='center'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOrtogonalAccess().getCenterKeyword_4());
		}
	)
;

// Entry rule entryRuleBlackWhite
entryRuleBlackWhite returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBlackWhiteRule()); }
	iv_ruleBlackWhite=ruleBlackWhite
	{ $current=$iv_ruleBlackWhite.current.getText(); }
	EOF;

// Rule BlackWhite
ruleBlackWhite returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='black'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlackWhiteAccess().getBlackKeyword_0());
		}
		    |
		kw='white'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlackWhiteAccess().getWhiteKeyword_1());
		}
	)
;

// Entry rule entryRuleSensorStatus
entryRuleSensorStatus returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSensorStatusRule()); }
	iv_ruleSensorStatus=ruleSensorStatus
	{ $current=$iv_ruleSensorStatus.current.getText(); }
	EOF;

// Rule SensorStatus
ruleSensorStatus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='covered'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSensorStatusAccess().getCoveredKeyword_0());
		}
		    |
		kw='uncovered'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSensorStatusAccess().getUncoveredKeyword_1());
		}
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='+'
			{
				newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ld.project2.ThymioDSL.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='*'
			{
				newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ld.project2.ThymioDSL.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getValueEIntParserRuleCall_0_0());
				}
				lv_value_0_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"ld.project2.ThymioDSL.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1());
			}
			this_Addition_2=ruleAddition
			{
				$current = $this_Addition_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
