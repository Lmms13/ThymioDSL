/**
 * generated by Xtext 2.34.0
 */
package ld.project2.thymioDSL.impl;

import java.util.Collection;

import ld.project2.thymioDSL.Expression;
import ld.project2.thymioDSL.Sound;
import ld.project2.thymioDSL.ThymioDSLPackage;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sound</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ld.project2.thymioDSL.impl.SoundImpl#getPitch <em>Pitch</em>}</li>
 *   <li>{@link ld.project2.thymioDSL.impl.SoundImpl#getDuration <em>Duration</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SoundImpl extends MinimalEObjectImpl.Container implements Sound
{
  /**
   * The cached value of the '{@link #getPitch() <em>Pitch</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPitch()
   * @generated
   * @ordered
   */
  protected EList<Expression> pitch;

  /**
   * The cached value of the '{@link #getDuration() <em>Duration</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuration()
   * @generated
   * @ordered
   */
  protected EList<String> duration;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SoundImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ThymioDSLPackage.Literals.SOUND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getPitch()
  {
    if (pitch == null)
    {
      pitch = new EObjectContainmentEList<Expression>(Expression.class, this, ThymioDSLPackage.SOUND__PITCH);
    }
    return pitch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getDuration()
  {
    if (duration == null)
    {
      duration = new EDataTypeEList<String>(String.class, this, ThymioDSLPackage.SOUND__DURATION);
    }
    return duration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ThymioDSLPackage.SOUND__PITCH:
        return ((InternalEList<?>)getPitch()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ThymioDSLPackage.SOUND__PITCH:
        return getPitch();
      case ThymioDSLPackage.SOUND__DURATION:
        return getDuration();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ThymioDSLPackage.SOUND__PITCH:
        getPitch().clear();
        getPitch().addAll((Collection<? extends Expression>)newValue);
        return;
      case ThymioDSLPackage.SOUND__DURATION:
        getDuration().clear();
        getDuration().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ThymioDSLPackage.SOUND__PITCH:
        getPitch().clear();
        return;
      case ThymioDSLPackage.SOUND__DURATION:
        getDuration().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ThymioDSLPackage.SOUND__PITCH:
        return pitch != null && !pitch.isEmpty();
      case ThymioDSLPackage.SOUND__DURATION:
        return duration != null && !duration.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (duration: ");
    result.append(duration);
    result.append(')');
    return result.toString();
  }

} //SoundImpl
