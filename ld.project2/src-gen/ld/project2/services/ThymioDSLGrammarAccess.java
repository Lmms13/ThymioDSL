/*
 * generated by Xtext 2.34.0
 */
package ld.project2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ThymioDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Model");
		private final Assignment cProceduresAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProceduresProcedureParserRuleCall_0 = (RuleCall)cProceduresAssignment.eContents().get(0);
		
		//Model returns Model:
		//    (procedures+=Procedure)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(procedures+=Procedure)+
		public Assignment getProceduresAssignment() { return cProceduresAssignment; }
		
		//Procedure
		public RuleCall getProceduresProcedureParserRuleCall_0() { return cProceduresProcedureParserRuleCall_0; }
	}
	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEventKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventsEventParserRuleCall_3_0 = (RuleCall)cEventsAssignment_3.eContents().get(0);
		private final Keyword cActionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		
		//Procedure returns Procedure:
		//    'Procedure:'
		//    name = EString
		//    'Event:'
		//    (events+=Event)
		//    'Actions:'
		//    (actions+=Action)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Procedure:'
		//name = EString
		//'Event:'
		//(events+=Event)
		//'Actions:'
		//(actions+=Action)+
		public Group getGroup() { return cGroup; }
		
		//'Procedure:'
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }
		
		//name = EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'Event:'
		public Keyword getEventKeyword_2() { return cEventKeyword_2; }
		
		//(events+=Event)
		public Assignment getEventsAssignment_3() { return cEventsAssignment_3; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_3_0() { return cEventsEventParserRuleCall_3_0; }
		
		//'Actions:'
		public Keyword getActionsKeyword_4() { return cActionsKeyword_4; }
		
		//(actions+=Action)+
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0() { return cActionsActionParserRuleCall_5_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cButton_is_clickedKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cButtonAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cButtonOrtogonalParserRuleCall_2_1_0 = (RuleCall)cButtonAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRobot_is_tappedKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTapAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTapEBooleanParserRuleCall_3_1_0 = (RuleCall)cTapAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSound_is_detectedKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMicAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMicEBooleanParserRuleCall_4_1_0 = (RuleCall)cMicAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSensor_is_activatedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSensorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSensorSensorParserRuleCall_5_1_0 = (RuleCall)cSensorAssignment_5_1.eContents().get(0);
		
		//Event returns Event:
		//    {Event} 'when:'
		//    ('button_is_clicked:'
		//    (button = Ortogonal))?
		//    ('robot_is_tapped:'
		//    (tap = EBoolean))?
		//    ('sound_is_detected:'
		//    (mic = EBoolean))?
		//    ('sensor_is_activated:'
		//    (sensor+= (Sensor)))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Event} 'when:'
		//('button_is_clicked:'
		//(button = Ortogonal))?
		//('robot_is_tapped:'
		//(tap = EBoolean))?
		//('sound_is_detected:'
		//(mic = EBoolean))?
		//('sensor_is_activated:'
		//(sensor+= (Sensor)))?
		public Group getGroup() { return cGroup; }
		
		//{Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//'when:'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//('button_is_clicked:'
		//(button = Ortogonal))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'button_is_clicked:'
		public Keyword getButton_is_clickedKeyword_2_0() { return cButton_is_clickedKeyword_2_0; }
		
		//(button = Ortogonal)
		public Assignment getButtonAssignment_2_1() { return cButtonAssignment_2_1; }
		
		//Ortogonal
		public RuleCall getButtonOrtogonalParserRuleCall_2_1_0() { return cButtonOrtogonalParserRuleCall_2_1_0; }
		
		//('robot_is_tapped:'
		//(tap = EBoolean))?
		public Group getGroup_3() { return cGroup_3; }
		
		//'robot_is_tapped:'
		public Keyword getRobot_is_tappedKeyword_3_0() { return cRobot_is_tappedKeyword_3_0; }
		
		//(tap = EBoolean)
		public Assignment getTapAssignment_3_1() { return cTapAssignment_3_1; }
		
		//EBoolean
		public RuleCall getTapEBooleanParserRuleCall_3_1_0() { return cTapEBooleanParserRuleCall_3_1_0; }
		
		//('sound_is_detected:'
		//(mic = EBoolean))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'sound_is_detected:'
		public Keyword getSound_is_detectedKeyword_4_0() { return cSound_is_detectedKeyword_4_0; }
		
		//(mic = EBoolean)
		public Assignment getMicAssignment_4_1() { return cMicAssignment_4_1; }
		
		//EBoolean
		public RuleCall getMicEBooleanParserRuleCall_4_1_0() { return cMicEBooleanParserRuleCall_4_1_0; }
		
		//('sensor_is_activated:'
		//(sensor+= (Sensor)))?
		public Group getGroup_5() { return cGroup_5; }
		
		//'sensor_is_activated:'
		public Keyword getSensor_is_activatedKeyword_5_0() { return cSensor_is_activatedKeyword_5_0; }
		
		//(sensor+= (Sensor))
		public Assignment getSensorAssignment_5_1() { return cSensorAssignment_5_1; }
		
		//(Sensor)
		public RuleCall getSensorSensorParserRuleCall_5_1_0() { return cSensorSensorParserRuleCall_5_1_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cBottom_leftKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBottomLeftSensorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBottomLeftSensorBlackWhiteParserRuleCall_1_1_0 = (RuleCall)cBottomLeftSensorAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBottom_rightKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBottomRightSensorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBottomRightSensorBlackWhiteParserRuleCall_2_1_0 = (RuleCall)cBottomRightSensorAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNorthwestKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNorthWestAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNorthWestSensorStatusParserRuleCall_3_1_0 = (RuleCall)cNorthWestAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNorthnorthwestKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNorthNorthWestAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNorthNorthWestSensorStatusParserRuleCall_4_1_0 = (RuleCall)cNorthNorthWestAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cNorthKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNorthAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNorthSensorStatusParserRuleCall_5_1_0 = (RuleCall)cNorthAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cNorthnortheastKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cNorthNorthEastAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cNorthNorthEastSensorStatusParserRuleCall_6_1_0 = (RuleCall)cNorthNorthEastAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cNortheastKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cNorthEastAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cNorthEastSensorStatusParserRuleCall_7_1_0 = (RuleCall)cNorthEastAssignment_7_1.eContents().get(0);
		
		//Sensor returns Sensor:
		//    {Sensor} ('bottom_left:'
		//    bottomLeftSensor = BlackWhite)?
		//    ('bottom_right:'
		//    bottomRightSensor = BlackWhite)?
		//    ('northwest:'
		//     northWest = SensorStatus)?
		//    ('northnorthwest:'
		//     northNorthWest = SensorStatus)?
		//    ('north:'
		//     north = SensorStatus)?
		//    ('northnortheast:'
		//     northNorthEast = SensorStatus)?
		//     ('northeast:'
		//     northEast = SensorStatus)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sensor} ('bottom_left:'
		//bottomLeftSensor = BlackWhite)?
		//('bottom_right:'
		//bottomRightSensor = BlackWhite)?
		//('northwest:'
		// northWest = SensorStatus)?
		//('northnorthwest:'
		// northNorthWest = SensorStatus)?
		//('north:'
		// north = SensorStatus)?
		//('northnortheast:'
		// northNorthEast = SensorStatus)?
		// ('northeast:'
		// northEast = SensorStatus)?
		public Group getGroup() { return cGroup; }
		
		//{Sensor}
		public Action getSensorAction_0() { return cSensorAction_0; }
		
		//('bottom_left:'
		//   bottomLeftSensor = BlackWhite)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'bottom_left:'
		public Keyword getBottom_leftKeyword_1_0() { return cBottom_leftKeyword_1_0; }
		
		//bottomLeftSensor = BlackWhite
		public Assignment getBottomLeftSensorAssignment_1_1() { return cBottomLeftSensorAssignment_1_1; }
		
		//BlackWhite
		public RuleCall getBottomLeftSensorBlackWhiteParserRuleCall_1_1_0() { return cBottomLeftSensorBlackWhiteParserRuleCall_1_1_0; }
		
		//('bottom_right:'
		//bottomRightSensor = BlackWhite)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'bottom_right:'
		public Keyword getBottom_rightKeyword_2_0() { return cBottom_rightKeyword_2_0; }
		
		//bottomRightSensor = BlackWhite
		public Assignment getBottomRightSensorAssignment_2_1() { return cBottomRightSensorAssignment_2_1; }
		
		//BlackWhite
		public RuleCall getBottomRightSensorBlackWhiteParserRuleCall_2_1_0() { return cBottomRightSensorBlackWhiteParserRuleCall_2_1_0; }
		
		//('northwest:'
		// northWest = SensorStatus)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'northwest:'
		public Keyword getNorthwestKeyword_3_0() { return cNorthwestKeyword_3_0; }
		
		//northWest = SensorStatus
		public Assignment getNorthWestAssignment_3_1() { return cNorthWestAssignment_3_1; }
		
		//SensorStatus
		public RuleCall getNorthWestSensorStatusParserRuleCall_3_1_0() { return cNorthWestSensorStatusParserRuleCall_3_1_0; }
		
		//('northnorthwest:'
		// northNorthWest = SensorStatus)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'northnorthwest:'
		public Keyword getNorthnorthwestKeyword_4_0() { return cNorthnorthwestKeyword_4_0; }
		
		//northNorthWest = SensorStatus
		public Assignment getNorthNorthWestAssignment_4_1() { return cNorthNorthWestAssignment_4_1; }
		
		//SensorStatus
		public RuleCall getNorthNorthWestSensorStatusParserRuleCall_4_1_0() { return cNorthNorthWestSensorStatusParserRuleCall_4_1_0; }
		
		//('north:'
		// north = SensorStatus)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'north:'
		public Keyword getNorthKeyword_5_0() { return cNorthKeyword_5_0; }
		
		//north = SensorStatus
		public Assignment getNorthAssignment_5_1() { return cNorthAssignment_5_1; }
		
		//SensorStatus
		public RuleCall getNorthSensorStatusParserRuleCall_5_1_0() { return cNorthSensorStatusParserRuleCall_5_1_0; }
		
		//('northnortheast:'
		// northNorthEast = SensorStatus)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'northnortheast:'
		public Keyword getNorthnortheastKeyword_6_0() { return cNorthnortheastKeyword_6_0; }
		
		//northNorthEast = SensorStatus
		public Assignment getNorthNorthEastAssignment_6_1() { return cNorthNorthEastAssignment_6_1; }
		
		//SensorStatus
		public RuleCall getNorthNorthEastSensorStatusParserRuleCall_6_1_0() { return cNorthNorthEastSensorStatusParserRuleCall_6_1_0; }
		
		//('northeast:'
		//northEast = SensorStatus)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'northeast:'
		public Keyword getNortheastKeyword_7_0() { return cNortheastKeyword_7_0; }
		
		//northEast = SensorStatus
		public Assignment getNorthEastAssignment_7_1() { return cNorthEastAssignment_7_1; }
		
		//SensorStatus
		public RuleCall getNorthEastSensorStatusParserRuleCall_7_1_0() { return cNorthEastSensorStatusParserRuleCall_7_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMoveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMoveMotorParserRuleCall_1_0 = (RuleCall)cMoveAssignment_1.eContents().get(0);
		private final Keyword cToplightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTopLightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTopLightOnOffParserRuleCall_3_0 = (RuleCall)cTopLightAssignment_3.eContents().get(0);
		private final Keyword cBottomlightKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBottomLightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBottomLightOnOffParserRuleCall_5_0 = (RuleCall)cBottomLightAssignment_5.eContents().get(0);
		private final Keyword cSoundKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSoundAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSoundSoundParserRuleCall_7_0 = (RuleCall)cSoundAssignment_7.eContents().get(0);
		
		//Action returns Action:
		//    'move:'
		//    move = (Motor)
		//    'toplight:'
		//    topLight = OnOff
		//    'bottomlight:'
		//    bottomLight = OnOff
		//    'sound:'
		//    (sound+= Sound)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'move:'
		//move = (Motor)
		//'toplight:'
		//topLight = OnOff
		//'bottomlight:'
		//bottomLight = OnOff
		//'sound:'
		//(sound+= Sound)
		public Group getGroup() { return cGroup; }
		
		//'move:'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//move = (Motor)
		public Assignment getMoveAssignment_1() { return cMoveAssignment_1; }
		
		//(Motor)
		public RuleCall getMoveMotorParserRuleCall_1_0() { return cMoveMotorParserRuleCall_1_0; }
		
		//'toplight:'
		public Keyword getToplightKeyword_2() { return cToplightKeyword_2; }
		
		//topLight = OnOff
		public Assignment getTopLightAssignment_3() { return cTopLightAssignment_3; }
		
		//OnOff
		public RuleCall getTopLightOnOffParserRuleCall_3_0() { return cTopLightOnOffParserRuleCall_3_0; }
		
		//'bottomlight:'
		public Keyword getBottomlightKeyword_4() { return cBottomlightKeyword_4; }
		
		//bottomLight = OnOff
		public Assignment getBottomLightAssignment_5() { return cBottomLightAssignment_5; }
		
		//OnOff
		public RuleCall getBottomLightOnOffParserRuleCall_5_0() { return cBottomLightOnOffParserRuleCall_5_0; }
		
		//'sound:'
		public Keyword getSoundKeyword_6() { return cSoundKeyword_6; }
		
		//(sound+= Sound)
		public Assignment getSoundAssignment_7() { return cSoundAssignment_7; }
		
		//Sound
		public RuleCall getSoundSoundParserRuleCall_7_0() { return cSoundSoundParserRuleCall_7_0; }
	}
	public class MotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Motor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMotorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftAdditionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cRightKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightAdditionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		
		//Motor returns Motor:
		//    'motors:'
		//    'left:'
		//    (left = Addition)
		//    'right:'
		//    (right = Addition)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'motors:'
		//'left:'
		//(left = Addition)
		//'right:'
		//(right = Addition)
		public Group getGroup() { return cGroup; }
		
		//'motors:'
		public Keyword getMotorsKeyword_0() { return cMotorsKeyword_0; }
		
		//'left:'
		public Keyword getLeftKeyword_1() { return cLeftKeyword_1; }
		
		//(left = Addition)
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Addition
		public RuleCall getLeftAdditionParserRuleCall_2_0() { return cLeftAdditionParserRuleCall_2_0; }
		
		//'right:'
		public Keyword getRightKeyword_3() { return cRightKeyword_3; }
		
		//(right = Addition)
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_4_0() { return cRightAdditionParserRuleCall_4_0; }
	}
	public class SoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Sound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPitchAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPitchAdditionParserRuleCall_1_0 = (RuleCall)cPitchAssignment_1.eContents().get(0);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationNoteDurationParserRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNoteKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cPitchKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cPitchAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cPitchAdditionParserRuleCall_3_2_0 = (RuleCall)cPitchAssignment_3_2.eContents().get(0);
		private final Assignment cDurationAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cDurationNoteDurationParserRuleCall_3_3_0 = (RuleCall)cDurationAssignment_3_3.eContents().get(0);
		
		//Sound returns Sound:
		//    'Note'
		//    (pitch+= Addition)
		//    (duration+= NoteDuration)
		//    ('Note'
		//    'Pitch:'
		//    pitch+= Addition
		//    duration+= NoteDuration)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Note'
		//(pitch+= Addition)
		//(duration+= NoteDuration)
		//('Note'
		//'Pitch:'
		//pitch+= Addition
		//duration+= NoteDuration)*
		public Group getGroup() { return cGroup; }
		
		//'Note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//(pitch+= Addition)
		public Assignment getPitchAssignment_1() { return cPitchAssignment_1; }
		
		//Addition
		public RuleCall getPitchAdditionParserRuleCall_1_0() { return cPitchAdditionParserRuleCall_1_0; }
		
		//(duration+= NoteDuration)
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//NoteDuration
		public RuleCall getDurationNoteDurationParserRuleCall_2_0() { return cDurationNoteDurationParserRuleCall_2_0; }
		
		//('Note'
		//'Pitch:'
		//pitch+= Addition
		//duration+= NoteDuration)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'Note'
		public Keyword getNoteKeyword_3_0() { return cNoteKeyword_3_0; }
		
		//'Pitch:'
		public Keyword getPitchKeyword_3_1() { return cPitchKeyword_3_1; }
		
		//pitch+= Addition
		public Assignment getPitchAssignment_3_2() { return cPitchAssignment_3_2; }
		
		//Addition
		public RuleCall getPitchAdditionParserRuleCall_3_2_0() { return cPitchAdditionParserRuleCall_3_2_0; }
		
		//duration+= NoteDuration
		public Assignment getDurationAssignment_3_3() { return cDurationAssignment_3_3; }
		
		//NoteDuration
		public RuleCall getDurationNoteDurationParserRuleCall_3_3_0() { return cDurationNoteDurationParserRuleCall_3_3_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class OnOffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.OnOff");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cOnKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRBGParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cOffKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OnOff returns ecore::EString:
		//    'on' RBG | 'off';
		@Override public ParserRule getRule() { return rule; }
		
		//'on' RBG | 'off'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'on' RBG
		public Group getGroup_0() { return cGroup_0; }
		
		//'on'
		public Keyword getOnKeyword_0_0() { return cOnKeyword_0_0; }
		
		//RBG
		public RuleCall getRBGParserRuleCall_0_1() { return cRBGParserRuleCall_0_1; }
		
		//'off'
		public Keyword getOffKeyword_1() { return cOffKeyword_1; }
	}
	public class RBGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.RBG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEIntParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cEIntParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cEIntParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RBG returns ecore::EString:
		//    '('EInt','EInt','EInt')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('EInt','EInt','EInt')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//EInt
		public RuleCall getEIntParserRuleCall_1() { return cEIntParserRuleCall_1; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//EInt
		public RuleCall getEIntParserRuleCall_3() { return cEIntParserRuleCall_3; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//EInt
		public RuleCall getEIntParserRuleCall_5() { return cEIntParserRuleCall_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class NoteDurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.NoteDuration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cShortKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NoteDuration returns ecore::EString:
		//    'short' | 'long';
		@Override public ParserRule getRule() { return rule; }
		
		//'short' | 'long'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'short'
		public Keyword getShortKeyword_0() { return cShortKeyword_0; }
		
		//'long'
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }
	}
	public class OrtogonalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Ortogonal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUpKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDownKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeftKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRightKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCenterKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Ortogonal returns ecore::EString:
		//    'up' | 'down' | 'left' | 'right' | 'center';
		@Override public ParserRule getRule() { return rule; }
		
		//'up' | 'down' | 'left' | 'right' | 'center'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'up'
		public Keyword getUpKeyword_0() { return cUpKeyword_0; }
		
		//'down'
		public Keyword getDownKeyword_1() { return cDownKeyword_1; }
		
		//'left'
		public Keyword getLeftKeyword_2() { return cLeftKeyword_2; }
		
		//'right'
		public Keyword getRightKeyword_3() { return cRightKeyword_3; }
		
		//'center'
		public Keyword getCenterKeyword_4() { return cCenterKeyword_4; }
	}
	public class BlackWhiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.BlackWhite");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBlackKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWhiteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BlackWhite returns ecore::EString:
		//    'black' | 'white';
		@Override public ParserRule getRule() { return rule; }
		
		//'black' | 'white'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'black'
		public Keyword getBlackKeyword_0() { return cBlackKeyword_0; }
		
		//'white'
		public Keyword getWhiteKeyword_1() { return cWhiteKeyword_1; }
	}
	public class SensorStatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.SensorStatus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCoveredKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUncoveredKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SensorStatus returns ecore::EString:
		//    'covered' | 'uncovered';
		@Override public ParserRule getRule() { return rule; }
		
		//'covered' | 'uncovered'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'covered'
		public Keyword getCoveredKeyword_0() { return cCoveredKeyword_0; }
		
		//'uncovered'
		public Keyword getUncoveredKeyword_1() { return cUncoveredKeyword_1; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression:
		//  Multiplication ({Addition.left=current} '+' right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left=current} '+' right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left=current} '+' right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//  Primary ({Multiplication.left=current} '*' right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left=current} '*' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left=current} '*' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueEIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary returns Expression:
		//  value = EInt |
		//  '(' Addition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//value = EInt |
		//'(' Addition ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value = EInt
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0_0() { return cValueEIntParserRuleCall_0_0; }
		
		//'(' Addition ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_1_1() { return cAdditionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final ProcedureElements pProcedure;
	private final EventElements pEvent;
	private final SensorElements pSensor;
	private final ActionElements pAction;
	private final MotorElements pMotor;
	private final SoundElements pSound;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final OnOffElements pOnOff;
	private final RBGElements pRBG;
	private final NoteDurationElements pNoteDuration;
	private final OrtogonalElements pOrtogonal;
	private final BlackWhiteElements pBlackWhite;
	private final SensorStatusElements pSensorStatus;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ThymioDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProcedure = new ProcedureElements();
		this.pEvent = new EventElements();
		this.pSensor = new SensorElements();
		this.pAction = new ActionElements();
		this.pMotor = new MotorElements();
		this.pSound = new SoundElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.pOnOff = new OnOffElements();
		this.pRBG = new RBGElements();
		this.pNoteDuration = new NoteDurationElements();
		this.pOrtogonal = new OrtogonalElements();
		this.pBlackWhite = new BlackWhiteElements();
		this.pSensorStatus = new SensorStatusElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ld.project2.ThymioDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model returns Model:
	//    (procedures+=Procedure)+
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Procedure returns Procedure:
	//    'Procedure:'
	//    name = EString
	//    'Event:'
	//    (events+=Event)
	//    'Actions:'
	//    (actions+=Action)+
	//;
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}
	
	//Event returns Event:
	//    {Event} 'when:'
	//    ('button_is_clicked:'
	//    (button = Ortogonal))?
	//    ('robot_is_tapped:'
	//    (tap = EBoolean))?
	//    ('sound_is_detected:'
	//    (mic = EBoolean))?
	//    ('sensor_is_activated:'
	//    (sensor+= (Sensor)))?
	//;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Sensor returns Sensor:
	//    {Sensor} ('bottom_left:'
	//    bottomLeftSensor = BlackWhite)?
	//    ('bottom_right:'
	//    bottomRightSensor = BlackWhite)?
	//    ('northwest:'
	//     northWest = SensorStatus)?
	//    ('northnorthwest:'
	//     northNorthWest = SensorStatus)?
	//    ('north:'
	//     north = SensorStatus)?
	//    ('northnortheast:'
	//     northNorthEast = SensorStatus)?
	//     ('northeast:'
	//     northEast = SensorStatus)?
	//;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Action returns Action:
	//    'move:'
	//    move = (Motor)
	//    'toplight:'
	//    topLight = OnOff
	//    'bottomlight:'
	//    bottomLight = OnOff
	//    'sound:'
	//    (sound+= Sound)
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Motor returns Motor:
	//    'motors:'
	//    'left:'
	//    (left = Addition)
	//    'right:'
	//    (right = Addition)
	//;
	public MotorElements getMotorAccess() {
		return pMotor;
	}
	
	public ParserRule getMotorRule() {
		return getMotorAccess().getRule();
	}
	
	//Sound returns Sound:
	//    'Note'
	//    (pitch+= Addition)
	//    (duration+= NoteDuration)
	//    ('Note'
	//    'Pitch:'
	//    pitch+= Addition
	//    duration+= NoteDuration)*
	//;
	public SoundElements getSoundAccess() {
		return pSound;
	}
	
	public ParserRule getSoundRule() {
		return getSoundAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//OnOff returns ecore::EString:
	//    'on' RBG | 'off';
	public OnOffElements getOnOffAccess() {
		return pOnOff;
	}
	
	public ParserRule getOnOffRule() {
		return getOnOffAccess().getRule();
	}
	
	//RBG returns ecore::EString:
	//    '('EInt','EInt','EInt')';
	public RBGElements getRBGAccess() {
		return pRBG;
	}
	
	public ParserRule getRBGRule() {
		return getRBGAccess().getRule();
	}
	
	//NoteDuration returns ecore::EString:
	//    'short' | 'long';
	public NoteDurationElements getNoteDurationAccess() {
		return pNoteDuration;
	}
	
	public ParserRule getNoteDurationRule() {
		return getNoteDurationAccess().getRule();
	}
	
	//Ortogonal returns ecore::EString:
	//    'up' | 'down' | 'left' | 'right' | 'center';
	public OrtogonalElements getOrtogonalAccess() {
		return pOrtogonal;
	}
	
	public ParserRule getOrtogonalRule() {
		return getOrtogonalAccess().getRule();
	}
	
	//BlackWhite returns ecore::EString:
	//    'black' | 'white';
	public BlackWhiteElements getBlackWhiteAccess() {
		return pBlackWhite;
	}
	
	public ParserRule getBlackWhiteRule() {
		return getBlackWhiteAccess().getRule();
	}
	
	//SensorStatus returns ecore::EString:
	//    'covered' | 'uncovered';
	public SensorStatusElements getSensorStatusAccess() {
		return pSensorStatus;
	}
	
	public ParserRule getSensorStatusRule() {
		return getSensorStatusAccess().getRule();
	}
	
	//Addition returns Expression:
	//  Multiplication ({Addition.left=current} '+' right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Expression:
	//  Primary ({Multiplication.left=current} '*' right=Primary)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary returns Expression:
	//  value = EInt |
	//  '(' Addition ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
