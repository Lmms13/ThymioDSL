/*
 * generated by Xtext 2.34.0
 */
package ld.project2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ThymioDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Model");
		private final Assignment cProceduresAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProceduresProcedureParserRuleCall_0 = (RuleCall)cProceduresAssignment.eContents().get(0);
		
		//Model returns Model:
		//    (procedures+=Procedure)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(procedures+=Procedure)+
		public Assignment getProceduresAssignment() { return cProceduresAssignment; }
		
		//Procedure
		public RuleCall getProceduresProcedureParserRuleCall_0() { return cProceduresProcedureParserRuleCall_0; }
	}
	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEventKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventsEventParserRuleCall_3_0 = (RuleCall)cEventsAssignment_3.eContents().get(0);
		private final Keyword cActionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		
		//Procedure returns Procedure:
		//    'Procedure:'
		//    name = EString
		//    'Event:'
		//    (events = Event)
		//    'Actions:'
		//    (actions+=Action)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Procedure:'
		//name = EString
		//'Event:'
		//(events = Event)
		//'Actions:'
		//(actions+=Action)+
		public Group getGroup() { return cGroup; }
		
		//'Procedure:'
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }
		
		//name = EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'Event:'
		public Keyword getEventKeyword_2() { return cEventKeyword_2; }
		
		//(events = Event)
		public Assignment getEventsAssignment_3() { return cEventsAssignment_3; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_3_0() { return cEventsEventParserRuleCall_3_0; }
		
		//'Actions:'
		public Keyword getActionsKeyword_4() { return cActionsKeyword_4; }
		
		//(actions+=Action)+
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0() { return cActionsActionParserRuleCall_5_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cButton_is_clickedKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cButtonAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cButtonOrtogonalParserRuleCall_0_1_0 = (RuleCall)cButtonAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRobot_detects_stimulusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStimulusAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStimulusStimulusParserRuleCall_1_1_0 = (RuleCall)cStimulusAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cProximity_sensor_is_activatedKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cProxSensorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cProxSensorProxSensorParserRuleCall_2_1_0 = (RuleCall)cProxSensorAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cBottom_sensor_detects_colorKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBottomSensorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBottomSensorBottomSensorParserRuleCall_3_1_0 = (RuleCall)cBottomSensorAssignment_3_1.eContents().get(0);
		
		//Event returns Event:
		//    ('button_is_clicked:'
		//    (button = Ortogonal))|
		//    ('robot_detects_stimulus:'
		//    (stimulus = Stimulus))|
		//    ('proximity_sensor_is_activated:'
		//    (proxSensor = (ProxSensor)))|
		//    ('bottom_sensor_detects_color:'
		//    (bottomSensor = (BottomSensor)))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('button_is_clicked:'
		//(button = Ortogonal))|
		//('robot_detects_stimulus:'
		//(stimulus = Stimulus))|
		//('proximity_sensor_is_activated:'
		//(proxSensor = (ProxSensor)))|
		//('bottom_sensor_detects_color:'
		//(bottomSensor = (BottomSensor)))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('button_is_clicked:'
		//(button = Ortogonal))
		public Group getGroup_0() { return cGroup_0; }
		
		//'button_is_clicked:'
		public Keyword getButton_is_clickedKeyword_0_0() { return cButton_is_clickedKeyword_0_0; }
		
		//(button = Ortogonal)
		public Assignment getButtonAssignment_0_1() { return cButtonAssignment_0_1; }
		
		//Ortogonal
		public RuleCall getButtonOrtogonalParserRuleCall_0_1_0() { return cButtonOrtogonalParserRuleCall_0_1_0; }
		
		//('robot_detects_stimulus:'
		//(stimulus = Stimulus))
		public Group getGroup_1() { return cGroup_1; }
		
		//'robot_detects_stimulus:'
		public Keyword getRobot_detects_stimulusKeyword_1_0() { return cRobot_detects_stimulusKeyword_1_0; }
		
		//(stimulus = Stimulus)
		public Assignment getStimulusAssignment_1_1() { return cStimulusAssignment_1_1; }
		
		//Stimulus
		public RuleCall getStimulusStimulusParserRuleCall_1_1_0() { return cStimulusStimulusParserRuleCall_1_1_0; }
		
		//('proximity_sensor_is_activated:'
		//(proxSensor = (ProxSensor)))
		public Group getGroup_2() { return cGroup_2; }
		
		//'proximity_sensor_is_activated:'
		public Keyword getProximity_sensor_is_activatedKeyword_2_0() { return cProximity_sensor_is_activatedKeyword_2_0; }
		
		//(proxSensor = (ProxSensor))
		public Assignment getProxSensorAssignment_2_1() { return cProxSensorAssignment_2_1; }
		
		//(ProxSensor)
		public RuleCall getProxSensorProxSensorParserRuleCall_2_1_0() { return cProxSensorProxSensorParserRuleCall_2_1_0; }
		
		//('bottom_sensor_detects_color:'
		//(bottomSensor = (BottomSensor)))
		public Group getGroup_3() { return cGroup_3; }
		
		//'bottom_sensor_detects_color:'
		public Keyword getBottom_sensor_detects_colorKeyword_3_0() { return cBottom_sensor_detects_colorKeyword_3_0; }
		
		//(bottomSensor = (BottomSensor))
		public Assignment getBottomSensorAssignment_3_1() { return cBottomSensorAssignment_3_1; }
		
		//(BottomSensor)
		public RuleCall getBottomSensorBottomSensorParserRuleCall_3_1_0() { return cBottomSensorBottomSensorParserRuleCall_3_1_0; }
	}
	public class ProxSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.ProxSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProxSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFront_leftKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFrontLeftSensorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFrontLeftSensorSensorStatusParserRuleCall_1_1_0 = (RuleCall)cFrontLeftSensorAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFront_center_leftKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFrontCenterLeftSensorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFrontCenterLeftSensorSensorStatusParserRuleCall_2_1_0 = (RuleCall)cFrontCenterLeftSensorAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFront_centerKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFrontCenterSensorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFrontCenterSensorSensorStatusParserRuleCall_3_1_0 = (RuleCall)cFrontCenterSensorAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFront_center_rightKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFrontCenterRightSensorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFrontCenterRightSensorSensorStatusParserRuleCall_4_1_0 = (RuleCall)cFrontCenterRightSensorAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFront_rightKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFrontRightSensorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFrontRightSensorSensorStatusParserRuleCall_5_1_0 = (RuleCall)cFrontRightSensorAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cBack_leftKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cBackLeftSensorAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cBackLeftSensorSensorStatusParserRuleCall_6_1_0 = (RuleCall)cBackLeftSensorAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cBack_rightKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBackRightSensorAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBackRightSensorSensorStatusParserRuleCall_7_1_0 = (RuleCall)cBackRightSensorAssignment_7_1.eContents().get(0);
		
		//ProxSensor returns ProxSensor:
		//    {ProxSensor}
		//    ('front_left:'
		//    (frontLeftSensor = SensorStatus))?
		//    ('front_center_left:'
		//    (frontCenterLeftSensor = SensorStatus))?
		//    ('front_center:'
		//    (frontCenterSensor = SensorStatus))?
		//    ('front_center_right:'
		//    (frontCenterRightSensor = SensorStatus))?
		//    ('front_right:'
		//    (frontRightSensor = SensorStatus))?
		//    ('back_left:'
		//    (backLeftSensor = SensorStatus))?
		//    ('back_right:'
		//    (backRightSensor = SensorStatus))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ProxSensor}
		//('front_left:'
		//(frontLeftSensor = SensorStatus))?
		//('front_center_left:'
		//(frontCenterLeftSensor = SensorStatus))?
		//('front_center:'
		//(frontCenterSensor = SensorStatus))?
		//('front_center_right:'
		//(frontCenterRightSensor = SensorStatus))?
		//('front_right:'
		//(frontRightSensor = SensorStatus))?
		//('back_left:'
		//(backLeftSensor = SensorStatus))?
		//('back_right:'
		//(backRightSensor = SensorStatus))?
		public Group getGroup() { return cGroup; }
		
		//{ProxSensor}
		public Action getProxSensorAction_0() { return cProxSensorAction_0; }
		
		//('front_left:'
		//(frontLeftSensor = SensorStatus))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'front_left:'
		public Keyword getFront_leftKeyword_1_0() { return cFront_leftKeyword_1_0; }
		
		//(frontLeftSensor = SensorStatus)
		public Assignment getFrontLeftSensorAssignment_1_1() { return cFrontLeftSensorAssignment_1_1; }
		
		//SensorStatus
		public RuleCall getFrontLeftSensorSensorStatusParserRuleCall_1_1_0() { return cFrontLeftSensorSensorStatusParserRuleCall_1_1_0; }
		
		//('front_center_left:'
		//(frontCenterLeftSensor = SensorStatus))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'front_center_left:'
		public Keyword getFront_center_leftKeyword_2_0() { return cFront_center_leftKeyword_2_0; }
		
		//(frontCenterLeftSensor = SensorStatus)
		public Assignment getFrontCenterLeftSensorAssignment_2_1() { return cFrontCenterLeftSensorAssignment_2_1; }
		
		//SensorStatus
		public RuleCall getFrontCenterLeftSensorSensorStatusParserRuleCall_2_1_0() { return cFrontCenterLeftSensorSensorStatusParserRuleCall_2_1_0; }
		
		//('front_center:'
		//(frontCenterSensor = SensorStatus))?
		public Group getGroup_3() { return cGroup_3; }
		
		//'front_center:'
		public Keyword getFront_centerKeyword_3_0() { return cFront_centerKeyword_3_0; }
		
		//(frontCenterSensor = SensorStatus)
		public Assignment getFrontCenterSensorAssignment_3_1() { return cFrontCenterSensorAssignment_3_1; }
		
		//SensorStatus
		public RuleCall getFrontCenterSensorSensorStatusParserRuleCall_3_1_0() { return cFrontCenterSensorSensorStatusParserRuleCall_3_1_0; }
		
		//('front_center_right:'
		//(frontCenterRightSensor = SensorStatus))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'front_center_right:'
		public Keyword getFront_center_rightKeyword_4_0() { return cFront_center_rightKeyword_4_0; }
		
		//(frontCenterRightSensor = SensorStatus)
		public Assignment getFrontCenterRightSensorAssignment_4_1() { return cFrontCenterRightSensorAssignment_4_1; }
		
		//SensorStatus
		public RuleCall getFrontCenterRightSensorSensorStatusParserRuleCall_4_1_0() { return cFrontCenterRightSensorSensorStatusParserRuleCall_4_1_0; }
		
		//('front_right:'
		//(frontRightSensor = SensorStatus))?
		public Group getGroup_5() { return cGroup_5; }
		
		//'front_right:'
		public Keyword getFront_rightKeyword_5_0() { return cFront_rightKeyword_5_0; }
		
		//(frontRightSensor = SensorStatus)
		public Assignment getFrontRightSensorAssignment_5_1() { return cFrontRightSensorAssignment_5_1; }
		
		//SensorStatus
		public RuleCall getFrontRightSensorSensorStatusParserRuleCall_5_1_0() { return cFrontRightSensorSensorStatusParserRuleCall_5_1_0; }
		
		//('back_left:'
		//(backLeftSensor = SensorStatus))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'back_left:'
		public Keyword getBack_leftKeyword_6_0() { return cBack_leftKeyword_6_0; }
		
		//(backLeftSensor = SensorStatus)
		public Assignment getBackLeftSensorAssignment_6_1() { return cBackLeftSensorAssignment_6_1; }
		
		//SensorStatus
		public RuleCall getBackLeftSensorSensorStatusParserRuleCall_6_1_0() { return cBackLeftSensorSensorStatusParserRuleCall_6_1_0; }
		
		//('back_right:'
		//(backRightSensor = SensorStatus))?
		public Group getGroup_7() { return cGroup_7; }
		
		//'back_right:'
		public Keyword getBack_rightKeyword_7_0() { return cBack_rightKeyword_7_0; }
		
		//(backRightSensor = SensorStatus)
		public Assignment getBackRightSensorAssignment_7_1() { return cBackRightSensorAssignment_7_1; }
		
		//SensorStatus
		public RuleCall getBackRightSensorSensorStatusParserRuleCall_7_1_0() { return cBackRightSensorSensorStatusParserRuleCall_7_1_0; }
	}
	public class BottomSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.BottomSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cBottomLeftSensorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBottomLeftSensorBlackWhiteParserRuleCall_0_1_0 = (RuleCall)cBottomLeftSensorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBottomRightSensorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBottomRightSensorBlackWhiteParserRuleCall_1_1_0 = (RuleCall)cBottomRightSensorAssignment_1_1.eContents().get(0);
		
		//BottomSensor returns BottomSensor:
		//    ('left:'
		//    (bottomLeftSensor = BlackWhite))
		//    ('right:'
		//    (bottomRightSensor = BlackWhite))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('left:'
		//(bottomLeftSensor = BlackWhite))
		//('right:'
		//(bottomRightSensor = BlackWhite))
		public Group getGroup() { return cGroup; }
		
		//('left:'
		//(bottomLeftSensor = BlackWhite))
		public Group getGroup_0() { return cGroup_0; }
		
		//'left:'
		public Keyword getLeftKeyword_0_0() { return cLeftKeyword_0_0; }
		
		//(bottomLeftSensor = BlackWhite)
		public Assignment getBottomLeftSensorAssignment_0_1() { return cBottomLeftSensorAssignment_0_1; }
		
		//BlackWhite
		public RuleCall getBottomLeftSensorBlackWhiteParserRuleCall_0_1_0() { return cBottomLeftSensorBlackWhiteParserRuleCall_0_1_0; }
		
		//('right:'
		//(bottomRightSensor = BlackWhite))
		public Group getGroup_1() { return cGroup_1; }
		
		//'right:'
		public Keyword getRightKeyword_1_0() { return cRightKeyword_1_0; }
		
		//(bottomRightSensor = BlackWhite)
		public Assignment getBottomRightSensorAssignment_1_1() { return cBottomRightSensorAssignment_1_1; }
		
		//BlackWhite
		public RuleCall getBottomRightSensorBlackWhiteParserRuleCall_1_1_0() { return cBottomRightSensorBlackWhiteParserRuleCall_1_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMoveKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMoveAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMoveMotorsParserRuleCall_0_1_0 = (RuleCall)cMoveAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLightsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLightLightsParserRuleCall_1_1_0 = (RuleCall)cLightAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSoundKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSoundAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSoundSoundParserRuleCall_2_1_0 = (RuleCall)cSoundAssignment_2_1.eContents().get(0);
		
		//Action returns Action:
		//    ('move:'
		//    (move = (Motors)))|
		//    ('lights:'
		//    (light = (Lights)))|
		//    ('sound:'
		//    (sound+= (Sound)+))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('move:'
		//(move = (Motors)))|
		//('lights:'
		//(light = (Lights)))|
		//('sound:'
		//(sound+= (Sound)+))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('move:'
		//(move = (Motors)))
		public Group getGroup_0() { return cGroup_0; }
		
		//'move:'
		public Keyword getMoveKeyword_0_0() { return cMoveKeyword_0_0; }
		
		//(move = (Motors))
		public Assignment getMoveAssignment_0_1() { return cMoveAssignment_0_1; }
		
		//(Motors)
		public RuleCall getMoveMotorsParserRuleCall_0_1_0() { return cMoveMotorsParserRuleCall_0_1_0; }
		
		//('lights:'
		//(light = (Lights)))
		public Group getGroup_1() { return cGroup_1; }
		
		//'lights:'
		public Keyword getLightsKeyword_1_0() { return cLightsKeyword_1_0; }
		
		//(light = (Lights))
		public Assignment getLightAssignment_1_1() { return cLightAssignment_1_1; }
		
		//(Lights)
		public RuleCall getLightLightsParserRuleCall_1_1_0() { return cLightLightsParserRuleCall_1_1_0; }
		
		//('sound:'
		//(sound+= (Sound)+))
		public Group getGroup_2() { return cGroup_2; }
		
		//'sound:'
		public Keyword getSoundKeyword_2_0() { return cSoundKeyword_2_0; }
		
		//(sound+= (Sound)+)
		public Assignment getSoundAssignment_2_1() { return cSoundAssignment_2_1; }
		
		//(Sound)
		public RuleCall getSoundSoundParserRuleCall_2_1_0() { return cSoundSoundParserRuleCall_2_1_0; }
	}
	public class MotorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Motors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeft_motorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftAdditionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cRight_motorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightAdditionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//Motors returns Motors:
		//    'left_motor:'
		//    (left = Addition)
		//    'right_motor:'
		//    (right = Addition)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'left_motor:'
		//(left = Addition)
		//'right_motor:'
		//(right = Addition)
		public Group getGroup() { return cGroup; }
		
		//'left_motor:'
		public Keyword getLeft_motorKeyword_0() { return cLeft_motorKeyword_0; }
		
		//(left = Addition)
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Addition
		public RuleCall getLeftAdditionParserRuleCall_1_0() { return cLeftAdditionParserRuleCall_1_0; }
		
		//'right_motor:'
		public Keyword getRight_motorKeyword_2() { return cRight_motorKeyword_2; }
		
		//(right = Addition)
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_3_0() { return cRightAdditionParserRuleCall_3_0; }
	}
	public class LightsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Lights");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLightsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTop_lightKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cOnKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cTopLightAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cTopLightRGBParserRuleCall_1_1_0_1_0 = (RuleCall)cTopLightAssignment_1_1_0_1.eContents().get(0);
		private final Keyword cOffKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBottom_lightKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Keyword cOnKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cBottomLightAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cBottomLightRGBParserRuleCall_2_1_0_1_0 = (RuleCall)cBottomLightAssignment_2_1_0_1.eContents().get(0);
		private final Keyword cOffKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		
		//Lights returns Lights:
		//    {Lights} ('top_light:'
		//    (('on'
		//    (topLight = (RGB)))|
		//    ('off')))
		//    ('bottom_light:'
		//    (('on'
		//    (bottomLight = (RGB)))|
		//    ('off')))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Lights} ('top_light:'
		//(('on'
		//(topLight = (RGB)))|
		//('off')))
		//('bottom_light:'
		//(('on'
		//(bottomLight = (RGB)))|
		//('off')))
		public Group getGroup() { return cGroup; }
		
		//{Lights}
		public Action getLightsAction_0() { return cLightsAction_0; }
		
		//('top_light:'
		//   (('on'
		//   (topLight = (RGB)))|
		//   ('off')))
		public Group getGroup_1() { return cGroup_1; }
		
		//'top_light:'
		public Keyword getTop_lightKeyword_1_0() { return cTop_lightKeyword_1_0; }
		
		//(('on'
		//(topLight = (RGB)))|
		//('off'))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//('on'
		//    (topLight = (RGB)))
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//'on'
		public Keyword getOnKeyword_1_1_0_0() { return cOnKeyword_1_1_0_0; }
		
		//(topLight = (RGB))
		public Assignment getTopLightAssignment_1_1_0_1() { return cTopLightAssignment_1_1_0_1; }
		
		//(RGB)
		public RuleCall getTopLightRGBParserRuleCall_1_1_0_1_0() { return cTopLightRGBParserRuleCall_1_1_0_1_0; }
		
		//('off')
		public Keyword getOffKeyword_1_1_1() { return cOffKeyword_1_1_1; }
		
		//('bottom_light:'
		//(('on'
		//(bottomLight = (RGB)))|
		//('off')))
		public Group getGroup_2() { return cGroup_2; }
		
		//'bottom_light:'
		public Keyword getBottom_lightKeyword_2_0() { return cBottom_lightKeyword_2_0; }
		
		//(('on'
		//(bottomLight = (RGB)))|
		//('off'))
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//('on'
		//    (bottomLight = (RGB)))
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2_1_0_0() { return cOnKeyword_2_1_0_0; }
		
		//(bottomLight = (RGB))
		public Assignment getBottomLightAssignment_2_1_0_1() { return cBottomLightAssignment_2_1_0_1; }
		
		//(RGB)
		public RuleCall getBottomLightRGBParserRuleCall_2_1_0_1_0() { return cBottomLightRGBParserRuleCall_2_1_0_1_0; }
		
		//('off')
		public Keyword getOffKeyword_2_1_1() { return cOffKeyword_2_1_1; }
	}
	public class RGBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.RGB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRedAdditionParserRuleCall_1_0 = (RuleCall)cRedAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGreenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGreenAdditionParserRuleCall_3_0 = (RuleCall)cGreenAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlueAdditionParserRuleCall_5_0 = (RuleCall)cBlueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RGB returns RGB:
		//    '('
		//    (red = Addition)
		//    ','
		//    (green = Addition)
		//    ','
		//    (blue = Addition)
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//(red = Addition)
		//','
		//(green = Addition)
		//','
		//(blue = Addition)
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(red = Addition)
		public Assignment getRedAssignment_1() { return cRedAssignment_1; }
		
		//Addition
		public RuleCall getRedAdditionParserRuleCall_1_0() { return cRedAdditionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//(green = Addition)
		public Assignment getGreenAssignment_3() { return cGreenAssignment_3; }
		
		//Addition
		public RuleCall getGreenAdditionParserRuleCall_3_0() { return cGreenAdditionParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//(blue = Addition)
		public Assignment getBlueAssignment_5() { return cBlueAssignment_5; }
		
		//Addition
		public RuleCall getBlueAdditionParserRuleCall_5_0() { return cBlueAdditionParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class SoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Sound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPitchAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPitchAdditionParserRuleCall_1_0 = (RuleCall)cPitchAssignment_1.eContents().get(0);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationNoteDurationParserRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		
		//Sound returns Sound:
		//    'note:'
		//    (pitch = Addition)
		//    (duration = NoteDuration)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'note:'
		//(pitch = Addition)
		//(duration = NoteDuration)
		public Group getGroup() { return cGroup; }
		
		//'note:'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//(pitch = Addition)
		public Assignment getPitchAssignment_1() { return cPitchAssignment_1; }
		
		//Addition
		public RuleCall getPitchAdditionParserRuleCall_1_0() { return cPitchAdditionParserRuleCall_1_0; }
		
		//(duration = NoteDuration)
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//NoteDuration
		public RuleCall getDurationNoteDurationParserRuleCall_2_0() { return cDurationNoteDurationParserRuleCall_2_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class StimulusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Stimulus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTapKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSoundKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Stimulus returns ecore::EString:
		//    'tap' | 'sound';
		@Override public ParserRule getRule() { return rule; }
		
		//'tap' | 'sound'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'tap'
		public Keyword getTapKeyword_0() { return cTapKeyword_0; }
		
		//'sound'
		public Keyword getSoundKeyword_1() { return cSoundKeyword_1; }
	}
	public class NoteDurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.NoteDuration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cShortKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NoteDuration returns ecore::EString:
		//    'short' | 'long';
		@Override public ParserRule getRule() { return rule; }
		
		//'short' | 'long'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'short'
		public Keyword getShortKeyword_0() { return cShortKeyword_0; }
		
		//'long'
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }
	}
	public class OrtogonalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Ortogonal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUpKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDownKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeftKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRightKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCenterKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Ortogonal returns ecore::EString:
		//    'up' | 'down' | 'left' | 'right' | 'center';
		@Override public ParserRule getRule() { return rule; }
		
		//'up' | 'down' | 'left' | 'right' | 'center'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'up'
		public Keyword getUpKeyword_0() { return cUpKeyword_0; }
		
		//'down'
		public Keyword getDownKeyword_1() { return cDownKeyword_1; }
		
		//'left'
		public Keyword getLeftKeyword_2() { return cLeftKeyword_2; }
		
		//'right'
		public Keyword getRightKeyword_3() { return cRightKeyword_3; }
		
		//'center'
		public Keyword getCenterKeyword_4() { return cCenterKeyword_4; }
	}
	public class SensorStatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.SensorStatus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVery_closeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCloseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFarKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//SensorStatus returns ecore::EString:
		//    'very_close' | 'close' | 'far';
		@Override public ParserRule getRule() { return rule; }
		
		//'very_close' | 'close' | 'far'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'very_close'
		public Keyword getVery_closeKeyword_0() { return cVery_closeKeyword_0; }
		
		//'close'
		public Keyword getCloseKeyword_1() { return cCloseKeyword_1; }
		
		//'far'
		public Keyword getFarKeyword_2() { return cFarKeyword_2; }
	}
	public class BlackWhiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.BlackWhite");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBlackKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWhiteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAnyKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//BlackWhite returns ecore::EString:
		//    'black' | 'white' | 'any';
		@Override public ParserRule getRule() { return rule; }
		
		//'black' | 'white' | 'any'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'black'
		public Keyword getBlackKeyword_0() { return cBlackKeyword_0; }
		
		//'white'
		public Keyword getWhiteKeyword_1() { return cWhiteKeyword_1; }
		
		//'any'
		public Keyword getAnyKeyword_2() { return cAnyKeyword_2; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression:
		//  Multiplication ({Addition.left=current} operator=('+'|'-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left=current} operator=('+'|'-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left=current} operator=('+'|'-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator=('+'|'-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('+'|'-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNumberParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//  Number ({Multiplication.left=current} operator=('*'|'/') right=Number)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Number ({Multiplication.left=current} operator=('*'|'/') right=Number)*
		public Group getGroup() { return cGroup; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//({Multiplication.left=current} operator=('*'|'/') right=Number)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator=('*'|'/')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('*'|'/')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//right=Number
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Number
		public RuleCall getRightNumberParserRuleCall_1_2_0() { return cRightNumberParserRuleCall_1_2_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ld.project2.ThymioDSL.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueEIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Number returns Expression:
		//  value = EInt |
		//  '(' Addition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//value = EInt |
		//'(' Addition ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value = EInt
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0_0() { return cValueEIntParserRuleCall_0_0; }
		
		//'(' Addition ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_1_1() { return cAdditionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final ProcedureElements pProcedure;
	private final EventElements pEvent;
	private final ProxSensorElements pProxSensor;
	private final BottomSensorElements pBottomSensor;
	private final ActionElements pAction;
	private final MotorsElements pMotors;
	private final LightsElements pLights;
	private final RGBElements pRGB;
	private final SoundElements pSound;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final StimulusElements pStimulus;
	private final NoteDurationElements pNoteDuration;
	private final OrtogonalElements pOrtogonal;
	private final SensorStatusElements pSensorStatus;
	private final BlackWhiteElements pBlackWhite;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final NumberElements pNumber;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ThymioDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProcedure = new ProcedureElements();
		this.pEvent = new EventElements();
		this.pProxSensor = new ProxSensorElements();
		this.pBottomSensor = new BottomSensorElements();
		this.pAction = new ActionElements();
		this.pMotors = new MotorsElements();
		this.pLights = new LightsElements();
		this.pRGB = new RGBElements();
		this.pSound = new SoundElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.pStimulus = new StimulusElements();
		this.pNoteDuration = new NoteDurationElements();
		this.pOrtogonal = new OrtogonalElements();
		this.pSensorStatus = new SensorStatusElements();
		this.pBlackWhite = new BlackWhiteElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pNumber = new NumberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ld.project2.ThymioDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model returns Model:
	//    (procedures+=Procedure)+
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Procedure returns Procedure:
	//    'Procedure:'
	//    name = EString
	//    'Event:'
	//    (events = Event)
	//    'Actions:'
	//    (actions+=Action)+
	//;
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}
	
	//Event returns Event:
	//    ('button_is_clicked:'
	//    (button = Ortogonal))|
	//    ('robot_detects_stimulus:'
	//    (stimulus = Stimulus))|
	//    ('proximity_sensor_is_activated:'
	//    (proxSensor = (ProxSensor)))|
	//    ('bottom_sensor_detects_color:'
	//    (bottomSensor = (BottomSensor)))
	//;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//ProxSensor returns ProxSensor:
	//    {ProxSensor}
	//    ('front_left:'
	//    (frontLeftSensor = SensorStatus))?
	//    ('front_center_left:'
	//    (frontCenterLeftSensor = SensorStatus))?
	//    ('front_center:'
	//    (frontCenterSensor = SensorStatus))?
	//    ('front_center_right:'
	//    (frontCenterRightSensor = SensorStatus))?
	//    ('front_right:'
	//    (frontRightSensor = SensorStatus))?
	//    ('back_left:'
	//    (backLeftSensor = SensorStatus))?
	//    ('back_right:'
	//    (backRightSensor = SensorStatus))?
	//;
	public ProxSensorElements getProxSensorAccess() {
		return pProxSensor;
	}
	
	public ParserRule getProxSensorRule() {
		return getProxSensorAccess().getRule();
	}
	
	//BottomSensor returns BottomSensor:
	//    ('left:'
	//    (bottomLeftSensor = BlackWhite))
	//    ('right:'
	//    (bottomRightSensor = BlackWhite))
	//;
	public BottomSensorElements getBottomSensorAccess() {
		return pBottomSensor;
	}
	
	public ParserRule getBottomSensorRule() {
		return getBottomSensorAccess().getRule();
	}
	
	//Action returns Action:
	//    ('move:'
	//    (move = (Motors)))|
	//    ('lights:'
	//    (light = (Lights)))|
	//    ('sound:'
	//    (sound+= (Sound)+))
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Motors returns Motors:
	//    'left_motor:'
	//    (left = Addition)
	//    'right_motor:'
	//    (right = Addition)
	//;
	public MotorsElements getMotorsAccess() {
		return pMotors;
	}
	
	public ParserRule getMotorsRule() {
		return getMotorsAccess().getRule();
	}
	
	//Lights returns Lights:
	//    {Lights} ('top_light:'
	//    (('on'
	//    (topLight = (RGB)))|
	//    ('off')))
	//    ('bottom_light:'
	//    (('on'
	//    (bottomLight = (RGB)))|
	//    ('off')))
	//;
	public LightsElements getLightsAccess() {
		return pLights;
	}
	
	public ParserRule getLightsRule() {
		return getLightsAccess().getRule();
	}
	
	//RGB returns RGB:
	//    '('
	//    (red = Addition)
	//    ','
	//    (green = Addition)
	//    ','
	//    (blue = Addition)
	//    ')'
	//;
	public RGBElements getRGBAccess() {
		return pRGB;
	}
	
	public ParserRule getRGBRule() {
		return getRGBAccess().getRule();
	}
	
	//Sound returns Sound:
	//    'note:'
	//    (pitch = Addition)
	//    (duration = NoteDuration)
	//;
	public SoundElements getSoundAccess() {
		return pSound;
	}
	
	public ParserRule getSoundRule() {
		return getSoundAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Stimulus returns ecore::EString:
	//    'tap' | 'sound';
	public StimulusElements getStimulusAccess() {
		return pStimulus;
	}
	
	public ParserRule getStimulusRule() {
		return getStimulusAccess().getRule();
	}
	
	//NoteDuration returns ecore::EString:
	//    'short' | 'long';
	public NoteDurationElements getNoteDurationAccess() {
		return pNoteDuration;
	}
	
	public ParserRule getNoteDurationRule() {
		return getNoteDurationAccess().getRule();
	}
	
	//Ortogonal returns ecore::EString:
	//    'up' | 'down' | 'left' | 'right' | 'center';
	public OrtogonalElements getOrtogonalAccess() {
		return pOrtogonal;
	}
	
	public ParserRule getOrtogonalRule() {
		return getOrtogonalAccess().getRule();
	}
	
	//SensorStatus returns ecore::EString:
	//    'very_close' | 'close' | 'far';
	public SensorStatusElements getSensorStatusAccess() {
		return pSensorStatus;
	}
	
	public ParserRule getSensorStatusRule() {
		return getSensorStatusAccess().getRule();
	}
	
	//BlackWhite returns ecore::EString:
	//    'black' | 'white' | 'any';
	public BlackWhiteElements getBlackWhiteAccess() {
		return pBlackWhite;
	}
	
	public ParserRule getBlackWhiteRule() {
		return getBlackWhiteAccess().getRule();
	}
	
	//Addition returns Expression:
	//  Multiplication ({Addition.left=current} operator=('+'|'-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Expression:
	//  Number ({Multiplication.left=current} operator=('*'|'/') right=Number)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Number returns Expression:
	//  value = EInt |
	//  '(' Addition ')';
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
