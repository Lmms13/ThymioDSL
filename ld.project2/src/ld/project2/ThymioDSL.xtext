grammar ld.project2.ThymioDSL with org.eclipse.xtext.common.Terminals

generate thymioDSL "http://www.project2.ld/ThymioDSL"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	(procedures+=Procedure)+
;
	
Procedure returns Procedure:
	'Procedure:'
	name = EString
	'Event:'
	(events+=Event)
	'Actions:'
	(actions+=Action)+
;

Event returns Event:
	{Event} ('button_is_clicked:'
	(button = Ortogonal))|
	('robot_is_tapped:'
	(tap = EBoolean))|
	('sound_is_detected:'
	(mic = EBoolean))|
	('sensor_is_activated:'
	(sensor+= (Sensor)))+
;

Sensor returns Sensor:
	{Sensor} ('back_left:'
	(backLeftSensor = BlackWhite))|
	('back_right:'
	(backRightSensor = BlackWhite))|
	('front_right:'
	(frontRightSensor = SensorStatus))|
	('front_center_right:'
	(frontCenterRightSensor = SensorStatus))|
	('front_center:'
	(frontCenterSensor = SensorStatus))|
	('front_center_left:'
	(frontCenterLeftSensor = SensorStatus))|
	('front_left:'
	(frontLeftSensor = SensorStatus))
;


Action returns Action:
	{Action} ('move:'
	(move = (Motor)))|
	('top_light:'
	(topLight = OnOff))|
	('bottom_light:'
	(bottomLight = OnOff))|
	('sound:'
	(sound+= (Sound)))
;

Motor returns Motor:
	'motors:'
	'left:'
	(left = Addition)
	'right:'
	(right = Addition)
;

Sound returns Sound:
	'note:'
	(pitch+= Addition)
	(duration+= NoteDuration)
	('note:'
	pitch+= Addition
	duration+= NoteDuration)*
;

EInt returns ecore::EInt:
	'-'? INT;

EString returns ecore::EString:
	STRING | ID;
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
OnOff returns ecore::EString:
	'on' RGB | 'off';
	
RGB returns ecore::EString:
	'('EInt','EInt','EInt')';
	
NoteDuration returns ecore::EString:
	'short' | 'long';

Ortogonal returns ecore::EString:
	'up' | 'down' | 'left' | 'right' | 'center';	
	
BlackWhite returns ecore::EString:
	'black' | 'white';
	
SensorStatus returns ecore::EString:
	'covered' | 'uncovered';
	
Addition returns Expression:
  Multiplication ({Addition.left=current} '+' right=Multiplication)*;

Multiplication returns Expression:
  Number ({Multiplication.left=current} '*' right=Number)*;

Number returns Expression:
  value = EInt |
  '(' Addition ')';