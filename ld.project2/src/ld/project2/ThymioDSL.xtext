grammar ld.project2.ThymioDSL with org.eclipse.xtext.common.Terminals

generate thymioDSL "http://www.project2.ld/ThymioDSL"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	(procedures+=Procedure)+
;
	
Procedure returns Procedure:
	'Procedure:'
	name = EString
	'Event:'
	(events = Event)
	'Actions:'
	(actions+=Action)+
;

Event returns Event:
	('button_is_clicked:'
	(button = Ortogonal))|
	('robot_detects_stimulus:'
	(stimulus = Stimulus))|
	('proximity_sensor_is_activated:'
	(proxSensor = (ProxSensor)))|
	('bottom_sensor_detects_color:'
	(bottomSensor = (BottomSensor)))
;

ProxSensor returns ProxSensor:
	{ProxSensor} 
	('front_left:'
	(frontLeftSensor = SensorStatus))?
	('front_center_left:'
	(frontCenterLeftSensor = SensorStatus))?
	('front_center:'
	(frontCenterSensor = SensorStatus))?
	('front_center_right:'
	(frontCenterRightSensor = SensorStatus))?
	('front_right:'
	(frontRightSensor = SensorStatus))?
	('back_left:'
	(backLeftSensor = SensorStatus))?
	('back_right:'
	(backRightSensor = SensorStatus))?
;

BottomSensor returns BottomSensor:
	('left:'
	(bottomLeftSensor = BlackWhite))
	('right:'
	(bottomRightSensor = BlackWhite))
;

Action returns Action:
	('move:'
	(move = (Motors)))|
	('lights:'
	(light = (Lights)))|
	('sound:'
	(sound+= (Sound)+))
;

Motors returns Motors:
	'left_motor:'
	(left = Addition)
	'right_motor:'
	(right = Addition)
;

Lights returns Lights:
	{Lights} ('top_light:'
	(('on'
	(topLight = (RGB)))|
	('off')))
	('bottom_light:'
	(('on'
	(bottomLight = (RGB)))|
	('off')))
;

RGB returns RGB:
	'('
	(red = Addition)
	','
	(green = Addition)
	','
	(blue = Addition)
	')'
;

Sound returns Sound:
	'note:'
	(pitch = Addition)
	(duration = NoteDuration)
;

EInt returns ecore::EInt:
	'-'? INT;

EString returns ecore::EString:
	STRING | ID;
	
Stimulus returns ecore::EString:
	'tap' | 'sound';
	
NoteDuration returns ecore::EString:
	'short' | 'long';

Ortogonal returns ecore::EString:
	'up' | 'down' | 'left' | 'right' | 'center';
	
SensorStatus returns ecore::EString:
	'very_close' | 'close' | 'far';
	
BlackWhite returns ecore::EString:
	'black' | 'white' | 'any';
	
Addition returns Expression:
  Multiplication ({Addition.left=current} operator=('+'|'-') right=Multiplication)*;

Multiplication returns Expression:
  Number ({Multiplication.left=current} operator=('*'|'/') right=Number)*;

Number returns Expression:
  value = EInt |
  '(' Addition ')';