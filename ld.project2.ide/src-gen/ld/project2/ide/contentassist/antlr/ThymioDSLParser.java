/*
 * generated by Xtext 2.34.0
 */
package ld.project2.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import ld.project2.ide.contentassist.antlr.internal.InternalThymioDSLParser;
import ld.project2.services.ThymioDSLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ThymioDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ThymioDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ThymioDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
			builder.put(grammarAccess.getSensorAccess().getAlternatives(), "rule__Sensor__Alternatives");
			builder.put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
			builder.put(grammarAccess.getLightsAccess().getAlternatives_1_1(), "rule__Lights__Alternatives_1_1");
			builder.put(grammarAccess.getLightsAccess().getAlternatives_2_1(), "rule__Lights__Alternatives_2_1");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getNoteDurationAccess().getAlternatives(), "rule__NoteDuration__Alternatives");
			builder.put(grammarAccess.getOrtogonalAccess().getAlternatives(), "rule__Ortogonal__Alternatives");
			builder.put(grammarAccess.getBlackWhiteAccess().getAlternatives(), "rule__BlackWhite__Alternatives");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0(), "rule__Addition__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0(), "rule__Multiplication__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
			builder.put(grammarAccess.getProcedureAccess().getGroup(), "rule__Procedure__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup_0(), "rule__Event__Group_0__0");
			builder.put(grammarAccess.getEventAccess().getGroup_1(), "rule__Event__Group_1__0");
			builder.put(grammarAccess.getEventAccess().getGroup_2(), "rule__Event__Group_2__0");
			builder.put(grammarAccess.getEventAccess().getGroup_3(), "rule__Event__Group_3__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_0(), "rule__Sensor__Group_0__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_1(), "rule__Sensor__Group_1__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_2(), "rule__Sensor__Group_2__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_3(), "rule__Sensor__Group_3__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_4(), "rule__Sensor__Group_4__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_5(), "rule__Sensor__Group_5__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_6(), "rule__Sensor__Group_6__0");
			builder.put(grammarAccess.getActionAccess().getGroup_0(), "rule__Action__Group_0__0");
			builder.put(grammarAccess.getActionAccess().getGroup_1(), "rule__Action__Group_1__0");
			builder.put(grammarAccess.getActionAccess().getGroup_2(), "rule__Action__Group_2__0");
			builder.put(grammarAccess.getMotorsAccess().getGroup(), "rule__Motors__Group__0");
			builder.put(grammarAccess.getLightsAccess().getGroup(), "rule__Lights__Group__0");
			builder.put(grammarAccess.getLightsAccess().getGroup_1(), "rule__Lights__Group_1__0");
			builder.put(grammarAccess.getLightsAccess().getGroup_1_1_0(), "rule__Lights__Group_1_1_0__0");
			builder.put(grammarAccess.getLightsAccess().getGroup_2(), "rule__Lights__Group_2__0");
			builder.put(grammarAccess.getLightsAccess().getGroup_2_1_0(), "rule__Lights__Group_2_1_0__0");
			builder.put(grammarAccess.getRGBAccess().getGroup(), "rule__RGB__Group__0");
			builder.put(grammarAccess.getSoundAccess().getGroup(), "rule__Sound__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_1(), "rule__Number__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getProceduresAssignment(), "rule__Model__ProceduresAssignment");
			builder.put(grammarAccess.getProcedureAccess().getNameAssignment_1(), "rule__Procedure__NameAssignment_1");
			builder.put(grammarAccess.getProcedureAccess().getEventsAssignment_3(), "rule__Procedure__EventsAssignment_3");
			builder.put(grammarAccess.getProcedureAccess().getActionsAssignment_5(), "rule__Procedure__ActionsAssignment_5");
			builder.put(grammarAccess.getEventAccess().getButtonAssignment_0_1(), "rule__Event__ButtonAssignment_0_1");
			builder.put(grammarAccess.getEventAccess().getTapAssignment_1_1(), "rule__Event__TapAssignment_1_1");
			builder.put(grammarAccess.getEventAccess().getMicAssignment_2_1(), "rule__Event__MicAssignment_2_1");
			builder.put(grammarAccess.getEventAccess().getSensorAssignment_3_1(), "rule__Event__SensorAssignment_3_1");
			builder.put(grammarAccess.getSensorAccess().getBackLeftSensorAssignment_0_1(), "rule__Sensor__BackLeftSensorAssignment_0_1");
			builder.put(grammarAccess.getSensorAccess().getBackRightSensorAssignment_1_1(), "rule__Sensor__BackRightSensorAssignment_1_1");
			builder.put(grammarAccess.getSensorAccess().getFrontRightSensorAssignment_2_1(), "rule__Sensor__FrontRightSensorAssignment_2_1");
			builder.put(grammarAccess.getSensorAccess().getFrontCenterRightSensorAssignment_3_1(), "rule__Sensor__FrontCenterRightSensorAssignment_3_1");
			builder.put(grammarAccess.getSensorAccess().getFrontCenterSensorAssignment_4_1(), "rule__Sensor__FrontCenterSensorAssignment_4_1");
			builder.put(grammarAccess.getSensorAccess().getFrontCenterLeftSensorAssignment_5_1(), "rule__Sensor__FrontCenterLeftSensorAssignment_5_1");
			builder.put(grammarAccess.getSensorAccess().getFrontLeftSensorAssignment_6_1(), "rule__Sensor__FrontLeftSensorAssignment_6_1");
			builder.put(grammarAccess.getActionAccess().getMoveAssignment_0_1(), "rule__Action__MoveAssignment_0_1");
			builder.put(grammarAccess.getActionAccess().getLightAssignment_1_1(), "rule__Action__LightAssignment_1_1");
			builder.put(grammarAccess.getActionAccess().getSoundAssignment_2_1(), "rule__Action__SoundAssignment_2_1");
			builder.put(grammarAccess.getMotorsAccess().getLeftAssignment_1(), "rule__Motors__LeftAssignment_1");
			builder.put(grammarAccess.getMotorsAccess().getRightAssignment_3(), "rule__Motors__RightAssignment_3");
			builder.put(grammarAccess.getLightsAccess().getTopLightAssignment_1_1_0_1(), "rule__Lights__TopLightAssignment_1_1_0_1");
			builder.put(grammarAccess.getLightsAccess().getBottomLightAssignment_2_1_0_1(), "rule__Lights__BottomLightAssignment_2_1_0_1");
			builder.put(grammarAccess.getRGBAccess().getRedAssignment_1(), "rule__RGB__RedAssignment_1");
			builder.put(grammarAccess.getRGBAccess().getGreenAssignment_3(), "rule__RGB__GreenAssignment_3");
			builder.put(grammarAccess.getRGBAccess().getBlueAssignment_5(), "rule__RGB__BlueAssignment_5");
			builder.put(grammarAccess.getSoundAccess().getPitchAssignment_1(), "rule__Sound__PitchAssignment_1");
			builder.put(grammarAccess.getSoundAccess().getDurationAssignment_2(), "rule__Sound__DurationAssignment_2");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1(), "rule__Addition__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1(), "rule__Multiplication__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
			builder.put(grammarAccess.getNumberAccess().getValueAssignment_0(), "rule__Number__ValueAssignment_0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ThymioDSLGrammarAccess grammarAccess;

	@Override
	protected InternalThymioDSLParser createParser() {
		InternalThymioDSLParser result = new InternalThymioDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ThymioDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ThymioDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
