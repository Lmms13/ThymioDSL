/*
 * generated by Xtext 2.34.0
 */
grammar InternalThymioDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ld.project2.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ld.project2.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ld.project2.services.ThymioDSLGrammarAccess;

}
@parser::members {
	private ThymioDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(ThymioDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getModelAccess().getProceduresAssignment()); }
			(rule__Model__ProceduresAssignment)
			{ after(grammarAccess.getModelAccess().getProceduresAssignment()); }
		)
		(
			{ before(grammarAccess.getModelAccess().getProceduresAssignment()); }
			(rule__Model__ProceduresAssignment)*
			{ after(grammarAccess.getModelAccess().getProceduresAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcedure
entryRuleProcedure
:
{ before(grammarAccess.getProcedureRule()); }
	 ruleProcedure
{ after(grammarAccess.getProcedureRule()); } 
	 EOF 
;

// Rule Procedure
ruleProcedure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureAccess().getGroup()); }
		(rule__Procedure__Group__0)
		{ after(grammarAccess.getProcedureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvent
entryRuleEvent
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventAccess().getGroup()); }
		(rule__Event__Group__0)
		{ after(grammarAccess.getEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensor
entryRuleSensor
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorAccess().getGroup()); }
		(rule__Sensor__Group__0)
		{ after(grammarAccess.getSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getGroup()); }
		(rule__Action__Group__0)
		{ after(grammarAccess.getActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMotor
entryRuleMotor
:
{ before(grammarAccess.getMotorRule()); }
	 ruleMotor
{ after(grammarAccess.getMotorRule()); } 
	 EOF 
;

// Rule Motor
ruleMotor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMotorAccess().getGroup()); }
		(rule__Motor__Group__0)
		{ after(grammarAccess.getMotorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSound
entryRuleSound
:
{ before(grammarAccess.getSoundRule()); }
	 ruleSound
{ after(grammarAccess.getSoundRule()); } 
	 EOF 
;

// Rule Sound
ruleSound 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSoundAccess().getGroup()); }
		(rule__Sound__Group__0)
		{ after(grammarAccess.getSoundAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEBoolean
entryRuleEBoolean
:
{ before(grammarAccess.getEBooleanRule()); }
	 ruleEBoolean
{ after(grammarAccess.getEBooleanRule()); } 
	 EOF 
;

// Rule EBoolean
ruleEBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEBooleanAccess().getAlternatives()); }
		(rule__EBoolean__Alternatives)
		{ after(grammarAccess.getEBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOnOff
entryRuleOnOff
:
{ before(grammarAccess.getOnOffRule()); }
	 ruleOnOff
{ after(grammarAccess.getOnOffRule()); } 
	 EOF 
;

// Rule OnOff
ruleOnOff 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOnOffAccess().getAlternatives()); }
		(rule__OnOff__Alternatives)
		{ after(grammarAccess.getOnOffAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRBG
entryRuleRBG
:
{ before(grammarAccess.getRBGRule()); }
	 ruleRBG
{ after(grammarAccess.getRBGRule()); } 
	 EOF 
;

// Rule RBG
ruleRBG 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRBGAccess().getGroup()); }
		(rule__RBG__Group__0)
		{ after(grammarAccess.getRBGAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNoteDuration
entryRuleNoteDuration
:
{ before(grammarAccess.getNoteDurationRule()); }
	 ruleNoteDuration
{ after(grammarAccess.getNoteDurationRule()); } 
	 EOF 
;

// Rule NoteDuration
ruleNoteDuration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNoteDurationAccess().getAlternatives()); }
		(rule__NoteDuration__Alternatives)
		{ after(grammarAccess.getNoteDurationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrtogonal
entryRuleOrtogonal
:
{ before(grammarAccess.getOrtogonalRule()); }
	 ruleOrtogonal
{ after(grammarAccess.getOrtogonalRule()); } 
	 EOF 
;

// Rule Ortogonal
ruleOrtogonal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrtogonalAccess().getAlternatives()); }
		(rule__Ortogonal__Alternatives)
		{ after(grammarAccess.getOrtogonalAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlackWhite
entryRuleBlackWhite
:
{ before(grammarAccess.getBlackWhiteRule()); }
	 ruleBlackWhite
{ after(grammarAccess.getBlackWhiteRule()); } 
	 EOF 
;

// Rule BlackWhite
ruleBlackWhite 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlackWhiteAccess().getAlternatives()); }
		(rule__BlackWhite__Alternatives)
		{ after(grammarAccess.getBlackWhiteAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorStatus
entryRuleSensorStatus
:
{ before(grammarAccess.getSensorStatusRule()); }
	 ruleSensorStatus
{ after(grammarAccess.getSensorStatusRule()); } 
	 EOF 
;

// Rule SensorStatus
ruleSensorStatus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorStatusAccess().getAlternatives()); }
		(rule__SensorStatus__Alternatives)
		{ after(grammarAccess.getSensorStatusAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBoolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnOff__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOnOffAccess().getGroup_0()); }
		(rule__OnOff__Group_0__0)
		{ after(grammarAccess.getOnOffAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getOnOffAccess().getOffKeyword_1()); }
		'off'
		{ after(grammarAccess.getOnOffAccess().getOffKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NoteDuration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteDurationAccess().getShortKeyword_0()); }
		'short'
		{ after(grammarAccess.getNoteDurationAccess().getShortKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getNoteDurationAccess().getLongKeyword_1()); }
		'long'
		{ after(grammarAccess.getNoteDurationAccess().getLongKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ortogonal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrtogonalAccess().getUpKeyword_0()); }
		'up'
		{ after(grammarAccess.getOrtogonalAccess().getUpKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrtogonalAccess().getDownKeyword_1()); }
		'down'
		{ after(grammarAccess.getOrtogonalAccess().getDownKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOrtogonalAccess().getLeftKeyword_2()); }
		'left'
		{ after(grammarAccess.getOrtogonalAccess().getLeftKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOrtogonalAccess().getRightKeyword_3()); }
		'right'
		{ after(grammarAccess.getOrtogonalAccess().getRightKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getOrtogonalAccess().getCenterKeyword_4()); }
		'center'
		{ after(grammarAccess.getOrtogonalAccess().getCenterKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlackWhite__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlackWhiteAccess().getBlackKeyword_0()); }
		'black'
		{ after(grammarAccess.getBlackWhiteAccess().getBlackKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlackWhiteAccess().getWhiteKeyword_1()); }
		'white'
		{ after(grammarAccess.getBlackWhiteAccess().getWhiteKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorStatus__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorStatusAccess().getCoveredKeyword_0()); }
		'covered'
		{ after(grammarAccess.getSensorStatusAccess().getCoveredKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorStatusAccess().getUncoveredKeyword_1()); }
		'uncovered'
		{ after(grammarAccess.getSensorStatusAccess().getUncoveredKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueAssignment_0()); }
		(rule__Primary__ValueAssignment_0)
		{ after(grammarAccess.getPrimaryAccess().getValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__0__Impl
	rule__Procedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getProcedureKeyword_0()); }
	'Procedure:'
	{ after(grammarAccess.getProcedureAccess().getProcedureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__1__Impl
	rule__Procedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getNameAssignment_1()); }
	(rule__Procedure__NameAssignment_1)
	{ after(grammarAccess.getProcedureAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__2__Impl
	rule__Procedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getEventKeyword_2()); }
	'Event:'
	{ after(grammarAccess.getProcedureAccess().getEventKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__3__Impl
	rule__Procedure__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getEventsAssignment_3()); }
	(rule__Procedure__EventsAssignment_3)
	{ after(grammarAccess.getProcedureAccess().getEventsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__4__Impl
	rule__Procedure__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getActionsKeyword_4()); }
	'Actions:'
	{ after(grammarAccess.getProcedureAccess().getActionsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getProcedureAccess().getActionsAssignment_5()); }
		(rule__Procedure__ActionsAssignment_5)
		{ after(grammarAccess.getProcedureAccess().getActionsAssignment_5()); }
	)
	(
		{ before(grammarAccess.getProcedureAccess().getActionsAssignment_5()); }
		(rule__Procedure__ActionsAssignment_5)*
		{ after(grammarAccess.getProcedureAccess().getActionsAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getEventAction_0()); }
	()
	{ after(grammarAccess.getEventAccess().getEventAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getWhenKeyword_1()); }
	'when:'
	{ after(grammarAccess.getEventAccess().getWhenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__2__Impl
	rule__Event__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_2()); }
	(rule__Event__Group_2__0)?
	{ after(grammarAccess.getEventAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__3__Impl
	rule__Event__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_3()); }
	(rule__Event__Group_3__0)?
	{ after(grammarAccess.getEventAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__4__Impl
	rule__Event__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_4()); }
	(rule__Event__Group_4__0)?
	{ after(grammarAccess.getEventAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_5()); }
	(rule__Event__Group_5__0)?
	{ after(grammarAccess.getEventAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_2__0__Impl
	rule__Event__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getButton_is_clickedKeyword_2_0()); }
	'button_is_clicked:'
	{ after(grammarAccess.getEventAccess().getButton_is_clickedKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getButtonAssignment_2_1()); }
	(rule__Event__ButtonAssignment_2_1)
	{ after(grammarAccess.getEventAccess().getButtonAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_3__0__Impl
	rule__Event__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getRobot_is_tappedKeyword_3_0()); }
	'robot_is_tapped:'
	{ after(grammarAccess.getEventAccess().getRobot_is_tappedKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getTapAssignment_3_1()); }
	(rule__Event__TapAssignment_3_1)
	{ after(grammarAccess.getEventAccess().getTapAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_4__0__Impl
	rule__Event__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getSound_is_detectedKeyword_4_0()); }
	'sound_is_detected:'
	{ after(grammarAccess.getEventAccess().getSound_is_detectedKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getMicAssignment_4_1()); }
	(rule__Event__MicAssignment_4_1)
	{ after(grammarAccess.getEventAccess().getMicAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_5__0__Impl
	rule__Event__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getSensor_is_activatedKeyword_5_0()); }
	'sensor_is_activated:'
	{ after(grammarAccess.getEventAccess().getSensor_is_activatedKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getSensorAssignment_5_1()); }
	(rule__Event__SensorAssignment_5_1)
	{ after(grammarAccess.getEventAccess().getSensorAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__0__Impl
	rule__Sensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorAction_0()); }
	()
	{ after(grammarAccess.getSensorAccess().getSensorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__1__Impl
	rule__Sensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_1()); }
	(rule__Sensor__Group_1__0)?
	{ after(grammarAccess.getSensorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__2__Impl
	rule__Sensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_2()); }
	(rule__Sensor__Group_2__0)?
	{ after(grammarAccess.getSensorAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__3__Impl
	rule__Sensor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_3()); }
	(rule__Sensor__Group_3__0)?
	{ after(grammarAccess.getSensorAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__4__Impl
	rule__Sensor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_4()); }
	(rule__Sensor__Group_4__0)?
	{ after(grammarAccess.getSensorAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__5__Impl
	rule__Sensor__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_5()); }
	(rule__Sensor__Group_5__0)?
	{ after(grammarAccess.getSensorAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__6__Impl
	rule__Sensor__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_6()); }
	(rule__Sensor__Group_6__0)?
	{ after(grammarAccess.getSensorAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_7()); }
	(rule__Sensor__Group_7__0)?
	{ after(grammarAccess.getSensorAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_1__0__Impl
	rule__Sensor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getBottom_leftKeyword_1_0()); }
	'bottom_left:'
	{ after(grammarAccess.getSensorAccess().getBottom_leftKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getBottomLeftSensorAssignment_1_1()); }
	(rule__Sensor__BottomLeftSensorAssignment_1_1)
	{ after(grammarAccess.getSensorAccess().getBottomLeftSensorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_2__0__Impl
	rule__Sensor__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getBottom_rightKeyword_2_0()); }
	'bottom_right:'
	{ after(grammarAccess.getSensorAccess().getBottom_rightKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getBottomRightSensorAssignment_2_1()); }
	(rule__Sensor__BottomRightSensorAssignment_2_1)
	{ after(grammarAccess.getSensorAccess().getBottomRightSensorAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_3__0__Impl
	rule__Sensor__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNorthwestKeyword_3_0()); }
	'northwest:'
	{ after(grammarAccess.getSensorAccess().getNorthwestKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNorthWestAssignment_3_1()); }
	(rule__Sensor__NorthWestAssignment_3_1)
	{ after(grammarAccess.getSensorAccess().getNorthWestAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_4__0__Impl
	rule__Sensor__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNorthnorthwestKeyword_4_0()); }
	'northnorthwest:'
	{ after(grammarAccess.getSensorAccess().getNorthnorthwestKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNorthNorthWestAssignment_4_1()); }
	(rule__Sensor__NorthNorthWestAssignment_4_1)
	{ after(grammarAccess.getSensorAccess().getNorthNorthWestAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_5__0__Impl
	rule__Sensor__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNorthKeyword_5_0()); }
	'north:'
	{ after(grammarAccess.getSensorAccess().getNorthKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNorthAssignment_5_1()); }
	(rule__Sensor__NorthAssignment_5_1)
	{ after(grammarAccess.getSensorAccess().getNorthAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_6__0__Impl
	rule__Sensor__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNorthnortheastKeyword_6_0()); }
	'northnortheast:'
	{ after(grammarAccess.getSensorAccess().getNorthnortheastKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNorthNorthEastAssignment_6_1()); }
	(rule__Sensor__NorthNorthEastAssignment_6_1)
	{ after(grammarAccess.getSensorAccess().getNorthNorthEastAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_7__0__Impl
	rule__Sensor__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNortheastKeyword_7_0()); }
	'northeast:'
	{ after(grammarAccess.getSensorAccess().getNortheastKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNorthEastAssignment_7_1()); }
	(rule__Sensor__NorthEastAssignment_7_1)
	{ after(grammarAccess.getSensorAccess().getNorthEastAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getMoveKeyword_0()); }
	'move:'
	{ after(grammarAccess.getActionAccess().getMoveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getMoveAssignment_1()); }
	(rule__Action__MoveAssignment_1)
	{ after(grammarAccess.getActionAccess().getMoveAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__2__Impl
	rule__Action__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getToplightKeyword_2()); }
	'toplight:'
	{ after(grammarAccess.getActionAccess().getToplightKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__3__Impl
	rule__Action__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getTopLightAssignment_3()); }
	(rule__Action__TopLightAssignment_3)
	{ after(grammarAccess.getActionAccess().getTopLightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__4__Impl
	rule__Action__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getBottomlightKeyword_4()); }
	'bottomlight:'
	{ after(grammarAccess.getActionAccess().getBottomlightKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__5__Impl
	rule__Action__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getBottomLightAssignment_5()); }
	(rule__Action__BottomLightAssignment_5)
	{ after(grammarAccess.getActionAccess().getBottomLightAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__6__Impl
	rule__Action__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getSoundKeyword_6()); }
	'sound:'
	{ after(grammarAccess.getActionAccess().getSoundKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getSoundAssignment_7()); }
	(rule__Action__SoundAssignment_7)
	{ after(grammarAccess.getActionAccess().getSoundAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Motor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Motor__Group__0__Impl
	rule__Motor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMotorAccess().getMotorsKeyword_0()); }
	'motors:'
	{ after(grammarAccess.getMotorAccess().getMotorsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Motor__Group__1__Impl
	rule__Motor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMotorAccess().getLeftKeyword_1()); }
	'left:'
	{ after(grammarAccess.getMotorAccess().getLeftKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Motor__Group__2__Impl
	rule__Motor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMotorAccess().getLeftAssignment_2()); }
	(rule__Motor__LeftAssignment_2)
	{ after(grammarAccess.getMotorAccess().getLeftAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Motor__Group__3__Impl
	rule__Motor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMotorAccess().getRightKeyword_3()); }
	'right:'
	{ after(grammarAccess.getMotorAccess().getRightKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Motor__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMotorAccess().getRightAssignment_4()); }
	(rule__Motor__RightAssignment_4)
	{ after(grammarAccess.getMotorAccess().getRightAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sound__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group__0__Impl
	rule__Sound__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getNoteKeyword_0()); }
	'Note'
	{ after(grammarAccess.getSoundAccess().getNoteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group__1__Impl
	rule__Sound__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getPitchAssignment_1()); }
	(rule__Sound__PitchAssignment_1)
	{ after(grammarAccess.getSoundAccess().getPitchAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group__2__Impl
	rule__Sound__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getDurationAssignment_2()); }
	(rule__Sound__DurationAssignment_2)
	{ after(grammarAccess.getSoundAccess().getDurationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getGroup_3()); }
	(rule__Sound__Group_3__0)*
	{ after(grammarAccess.getSoundAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sound__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group_3__0__Impl
	rule__Sound__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getNoteKeyword_3_0()); }
	'Note'
	{ after(grammarAccess.getSoundAccess().getNoteKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group_3__1__Impl
	rule__Sound__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getPitchKeyword_3_1()); }
	'Pitch:'
	{ after(grammarAccess.getSoundAccess().getPitchKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group_3__2__Impl
	rule__Sound__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getPitchAssignment_3_2()); }
	(rule__Sound__PitchAssignment_3_2)
	{ after(grammarAccess.getSoundAccess().getPitchAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getDurationAssignment_3_3()); }
	(rule__Sound__DurationAssignment_3_3)
	{ after(grammarAccess.getSoundAccess().getDurationAssignment_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OnOff__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnOff__Group_0__0__Impl
	rule__OnOff__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OnOff__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnOffAccess().getOnKeyword_0_0()); }
	'on'
	{ after(grammarAccess.getOnOffAccess().getOnKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnOff__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnOff__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OnOff__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnOffAccess().getRBGParserRuleCall_0_1()); }
	ruleRBG
	{ after(grammarAccess.getOnOffAccess().getRBGParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RBG__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RBG__Group__0__Impl
	rule__RBG__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRBGAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getRBGAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RBG__Group__1__Impl
	rule__RBG__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRBGAccess().getEIntParserRuleCall_1()); }
	ruleEInt
	{ after(grammarAccess.getRBGAccess().getEIntParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RBG__Group__2__Impl
	rule__RBG__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRBGAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getRBGAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RBG__Group__3__Impl
	rule__RBG__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRBGAccess().getEIntParserRuleCall_3()); }
	ruleEInt
	{ after(grammarAccess.getRBGAccess().getEIntParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RBG__Group__4__Impl
	rule__RBG__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRBGAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getRBGAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RBG__Group__5__Impl
	rule__RBG__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRBGAccess().getEIntParserRuleCall_5()); }
	ruleEInt
	{ after(grammarAccess.getRBGAccess().getEIntParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RBG__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RBG__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRBGAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getRBGAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
	'+'
	{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }
	'*'
	{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1()); }
	ruleAddition
	{ after(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ProceduresAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProceduresProcedureParserRuleCall_0()); }
		ruleProcedure
		{ after(grammarAccess.getModelAccess().getProceduresProcedureParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getProcedureAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__EventsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getEventsEventParserRuleCall_3_0()); }
		ruleEvent
		{ after(grammarAccess.getProcedureAccess().getEventsEventParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__ActionsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getActionsActionParserRuleCall_5_0()); }
		ruleAction
		{ after(grammarAccess.getProcedureAccess().getActionsActionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ButtonAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getButtonOrtogonalParserRuleCall_2_1_0()); }
		ruleOrtogonal
		{ after(grammarAccess.getEventAccess().getButtonOrtogonalParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__TapAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getTapEBooleanParserRuleCall_3_1_0()); }
		ruleEBoolean
		{ after(grammarAccess.getEventAccess().getTapEBooleanParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__MicAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getMicEBooleanParserRuleCall_4_1_0()); }
		ruleEBoolean
		{ after(grammarAccess.getEventAccess().getMicEBooleanParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__SensorAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getSensorSensorParserRuleCall_5_1_0()); }
		ruleSensor
		{ after(grammarAccess.getEventAccess().getSensorSensorParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__BottomLeftSensorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getBottomLeftSensorBlackWhiteParserRuleCall_1_1_0()); }
		ruleBlackWhite
		{ after(grammarAccess.getSensorAccess().getBottomLeftSensorBlackWhiteParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__BottomRightSensorAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getBottomRightSensorBlackWhiteParserRuleCall_2_1_0()); }
		ruleBlackWhite
		{ after(grammarAccess.getSensorAccess().getBottomRightSensorBlackWhiteParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__NorthWestAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getNorthWestSensorStatusParserRuleCall_3_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getSensorAccess().getNorthWestSensorStatusParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__NorthNorthWestAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getNorthNorthWestSensorStatusParserRuleCall_4_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getSensorAccess().getNorthNorthWestSensorStatusParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__NorthAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getNorthSensorStatusParserRuleCall_5_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getSensorAccess().getNorthSensorStatusParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__NorthNorthEastAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getNorthNorthEastSensorStatusParserRuleCall_6_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getSensorAccess().getNorthNorthEastSensorStatusParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__NorthEastAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getNorthEastSensorStatusParserRuleCall_7_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getSensorAccess().getNorthEastSensorStatusParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__MoveAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getMoveMotorParserRuleCall_1_0()); }
		ruleMotor
		{ after(grammarAccess.getActionAccess().getMoveMotorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__TopLightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getTopLightOnOffParserRuleCall_3_0()); }
		ruleOnOff
		{ after(grammarAccess.getActionAccess().getTopLightOnOffParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__BottomLightAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getBottomLightOnOffParserRuleCall_5_0()); }
		ruleOnOff
		{ after(grammarAccess.getActionAccess().getBottomLightOnOffParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__SoundAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getSoundSoundParserRuleCall_7_0()); }
		ruleSound
		{ after(grammarAccess.getActionAccess().getSoundSoundParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__LeftAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMotorAccess().getLeftAdditionParserRuleCall_2_0()); }
		ruleAddition
		{ after(grammarAccess.getMotorAccess().getLeftAdditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motor__RightAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMotorAccess().getRightAdditionParserRuleCall_4_0()); }
		ruleAddition
		{ after(grammarAccess.getMotorAccess().getRightAdditionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__PitchAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoundAccess().getPitchAdditionParserRuleCall_1_0()); }
		ruleAddition
		{ after(grammarAccess.getSoundAccess().getPitchAdditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__DurationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoundAccess().getDurationNoteDurationParserRuleCall_2_0()); }
		ruleNoteDuration
		{ after(grammarAccess.getSoundAccess().getDurationNoteDurationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__PitchAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoundAccess().getPitchAdditionParserRuleCall_3_2_0()); }
		ruleAddition
		{ after(grammarAccess.getSoundAccess().getPitchAdditionParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__DurationAssignment_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoundAccess().getDurationNoteDurationParserRuleCall_3_3_0()); }
		ruleNoteDuration
		{ after(grammarAccess.getSoundAccess().getDurationNoteDurationParserRuleCall_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueEIntParserRuleCall_0_0()); }
		ruleEInt
		{ after(grammarAccess.getPrimaryAccess().getValueEIntParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
