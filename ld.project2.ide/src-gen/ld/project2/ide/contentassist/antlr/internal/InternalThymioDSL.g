/*
 * generated by Xtext 2.34.0
 */
grammar InternalThymioDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ld.project2.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ld.project2.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ld.project2.services.ThymioDSLGrammarAccess;

}
@parser::members {
	private ThymioDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(ThymioDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getModelAccess().getProceduresAssignment()); }
			(rule__Model__ProceduresAssignment)
			{ after(grammarAccess.getModelAccess().getProceduresAssignment()); }
		)
		(
			{ before(grammarAccess.getModelAccess().getProceduresAssignment()); }
			(rule__Model__ProceduresAssignment)*
			{ after(grammarAccess.getModelAccess().getProceduresAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcedure
entryRuleProcedure
:
{ before(grammarAccess.getProcedureRule()); }
	 ruleProcedure
{ after(grammarAccess.getProcedureRule()); } 
	 EOF 
;

// Rule Procedure
ruleProcedure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureAccess().getGroup()); }
		(rule__Procedure__Group__0)
		{ after(grammarAccess.getProcedureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvent
entryRuleEvent
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventAccess().getAlternatives()); }
		(rule__Event__Alternatives)
		{ after(grammarAccess.getEventAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProxSensor
entryRuleProxSensor
:
{ before(grammarAccess.getProxSensorRule()); }
	 ruleProxSensor
{ after(grammarAccess.getProxSensorRule()); } 
	 EOF 
;

// Rule ProxSensor
ruleProxSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProxSensorAccess().getGroup()); }
		(rule__ProxSensor__Group__0)
		{ after(grammarAccess.getProxSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBottomSensor
entryRuleBottomSensor
:
{ before(grammarAccess.getBottomSensorRule()); }
	 ruleBottomSensor
{ after(grammarAccess.getBottomSensorRule()); } 
	 EOF 
;

// Rule BottomSensor
ruleBottomSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBottomSensorAccess().getGroup()); }
		(rule__BottomSensor__Group__0)
		{ after(grammarAccess.getBottomSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMotors
entryRuleMotors
:
{ before(grammarAccess.getMotorsRule()); }
	 ruleMotors
{ after(grammarAccess.getMotorsRule()); } 
	 EOF 
;

// Rule Motors
ruleMotors 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMotorsAccess().getGroup()); }
		(rule__Motors__Group__0)
		{ after(grammarAccess.getMotorsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLights
entryRuleLights
:
{ before(grammarAccess.getLightsRule()); }
	 ruleLights
{ after(grammarAccess.getLightsRule()); } 
	 EOF 
;

// Rule Lights
ruleLights 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLightsAccess().getGroup()); }
		(rule__Lights__Group__0)
		{ after(grammarAccess.getLightsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRGB
entryRuleRGB
:
{ before(grammarAccess.getRGBRule()); }
	 ruleRGB
{ after(grammarAccess.getRGBRule()); } 
	 EOF 
;

// Rule RGB
ruleRGB 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRGBAccess().getGroup()); }
		(rule__RGB__Group__0)
		{ after(grammarAccess.getRGBAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSound
entryRuleSound
:
{ before(grammarAccess.getSoundRule()); }
	 ruleSound
{ after(grammarAccess.getSoundRule()); } 
	 EOF 
;

// Rule Sound
ruleSound 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSoundAccess().getGroup()); }
		(rule__Sound__Group__0)
		{ after(grammarAccess.getSoundAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStimulus
entryRuleStimulus
:
{ before(grammarAccess.getStimulusRule()); }
	 ruleStimulus
{ after(grammarAccess.getStimulusRule()); } 
	 EOF 
;

// Rule Stimulus
ruleStimulus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStimulusAccess().getAlternatives()); }
		(rule__Stimulus__Alternatives)
		{ after(grammarAccess.getStimulusAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNoteDuration
entryRuleNoteDuration
:
{ before(grammarAccess.getNoteDurationRule()); }
	 ruleNoteDuration
{ after(grammarAccess.getNoteDurationRule()); } 
	 EOF 
;

// Rule NoteDuration
ruleNoteDuration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNoteDurationAccess().getAlternatives()); }
		(rule__NoteDuration__Alternatives)
		{ after(grammarAccess.getNoteDurationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrtogonal
entryRuleOrtogonal
:
{ before(grammarAccess.getOrtogonalRule()); }
	 ruleOrtogonal
{ after(grammarAccess.getOrtogonalRule()); } 
	 EOF 
;

// Rule Ortogonal
ruleOrtogonal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrtogonalAccess().getAlternatives()); }
		(rule__Ortogonal__Alternatives)
		{ after(grammarAccess.getOrtogonalAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorStatus
entryRuleSensorStatus
:
{ before(grammarAccess.getSensorStatusRule()); }
	 ruleSensorStatus
{ after(grammarAccess.getSensorStatusRule()); } 
	 EOF 
;

// Rule SensorStatus
ruleSensorStatus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorStatusAccess().getAlternatives()); }
		(rule__SensorStatus__Alternatives)
		{ after(grammarAccess.getSensorStatusAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlackWhite
entryRuleBlackWhite
:
{ before(grammarAccess.getBlackWhiteRule()); }
	 ruleBlackWhite
{ after(grammarAccess.getBlackWhiteRule()); } 
	 EOF 
;

// Rule BlackWhite
ruleBlackWhite 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlackWhiteAccess().getAlternatives()); }
		(rule__BlackWhite__Alternatives)
		{ after(grammarAccess.getBlackWhiteAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getAlternatives()); }
		(rule__Number__Alternatives)
		{ after(grammarAccess.getNumberAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getGroup_0()); }
		(rule__Event__Group_0__0)
		{ after(grammarAccess.getEventAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getEventAccess().getGroup_1()); }
		(rule__Event__Group_1__0)
		{ after(grammarAccess.getEventAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getEventAccess().getGroup_2()); }
		(rule__Event__Group_2__0)
		{ after(grammarAccess.getEventAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getEventAccess().getGroup_3()); }
		(rule__Event__Group_3__0)
		{ after(grammarAccess.getEventAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getGroup_0()); }
		(rule__Action__Group_0__0)
		{ after(grammarAccess.getActionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getGroup_1()); }
		(rule__Action__Group_1__0)
		{ after(grammarAccess.getActionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getGroup_2()); }
		(rule__Action__Group_2__0)
		{ after(grammarAccess.getActionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightsAccess().getGroup_1_1_0()); }
		(rule__Lights__Group_1_1_0__0)
		{ after(grammarAccess.getLightsAccess().getGroup_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getLightsAccess().getOffKeyword_1_1_1()); }
		'off'
		{ after(grammarAccess.getLightsAccess().getOffKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Alternatives_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightsAccess().getGroup_2_1_0()); }
		(rule__Lights__Group_2_1_0__0)
		{ after(grammarAccess.getLightsAccess().getGroup_2_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getLightsAccess().getOffKeyword_2_1_1()); }
		'off'
		{ after(grammarAccess.getLightsAccess().getOffKeyword_2_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stimulus__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStimulusAccess().getTapKeyword_0()); }
		'tap'
		{ after(grammarAccess.getStimulusAccess().getTapKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getStimulusAccess().getSoundKeyword_1()); }
		'sound'
		{ after(grammarAccess.getStimulusAccess().getSoundKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NoteDuration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteDurationAccess().getShortKeyword_0()); }
		'short'
		{ after(grammarAccess.getNoteDurationAccess().getShortKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getNoteDurationAccess().getLongKeyword_1()); }
		'long'
		{ after(grammarAccess.getNoteDurationAccess().getLongKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ortogonal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrtogonalAccess().getUpKeyword_0()); }
		'up'
		{ after(grammarAccess.getOrtogonalAccess().getUpKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrtogonalAccess().getDownKeyword_1()); }
		'down'
		{ after(grammarAccess.getOrtogonalAccess().getDownKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOrtogonalAccess().getLeftKeyword_2()); }
		'left'
		{ after(grammarAccess.getOrtogonalAccess().getLeftKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOrtogonalAccess().getRightKeyword_3()); }
		'right'
		{ after(grammarAccess.getOrtogonalAccess().getRightKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getOrtogonalAccess().getCenterKeyword_4()); }
		'center'
		{ after(grammarAccess.getOrtogonalAccess().getCenterKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorStatus__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorStatusAccess().getVery_closeKeyword_0()); }
		'very_close'
		{ after(grammarAccess.getSensorStatusAccess().getVery_closeKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorStatusAccess().getCloseKeyword_1()); }
		'close'
		{ after(grammarAccess.getSensorStatusAccess().getCloseKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSensorStatusAccess().getFarKeyword_2()); }
		'far'
		{ after(grammarAccess.getSensorStatusAccess().getFarKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlackWhite__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlackWhiteAccess().getBlackKeyword_0()); }
		'black'
		{ after(grammarAccess.getBlackWhiteAccess().getBlackKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlackWhiteAccess().getWhiteKeyword_1()); }
		'white'
		{ after(grammarAccess.getBlackWhiteAccess().getWhiteKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBlackWhiteAccess().getAnyKeyword_2()); }
		'any'
		{ after(grammarAccess.getBlackWhiteAccess().getAnyKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getValueAssignment_0()); }
		(rule__Number__ValueAssignment_0)
		{ after(grammarAccess.getNumberAccess().getValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getGroup_1()); }
		(rule__Number__Group_1__0)
		{ after(grammarAccess.getNumberAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__0__Impl
	rule__Procedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getProcedureKeyword_0()); }
	'Procedure:'
	{ after(grammarAccess.getProcedureAccess().getProcedureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__1__Impl
	rule__Procedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getNameAssignment_1()); }
	(rule__Procedure__NameAssignment_1)
	{ after(grammarAccess.getProcedureAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__2__Impl
	rule__Procedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getEventKeyword_2()); }
	'Event:'
	{ after(grammarAccess.getProcedureAccess().getEventKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__3__Impl
	rule__Procedure__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getEventsAssignment_3()); }
	(rule__Procedure__EventsAssignment_3)
	{ after(grammarAccess.getProcedureAccess().getEventsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__4__Impl
	rule__Procedure__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getActionsKeyword_4()); }
	'Actions:'
	{ after(grammarAccess.getProcedureAccess().getActionsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getProcedureAccess().getActionsAssignment_5()); }
		(rule__Procedure__ActionsAssignment_5)
		{ after(grammarAccess.getProcedureAccess().getActionsAssignment_5()); }
	)
	(
		{ before(grammarAccess.getProcedureAccess().getActionsAssignment_5()); }
		(rule__Procedure__ActionsAssignment_5)*
		{ after(grammarAccess.getProcedureAccess().getActionsAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_0__0__Impl
	rule__Event__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getButton_is_clickedKeyword_0_0()); }
	'button_is_clicked:'
	{ after(grammarAccess.getEventAccess().getButton_is_clickedKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getButtonAssignment_0_1()); }
	(rule__Event__ButtonAssignment_0_1)
	{ after(grammarAccess.getEventAccess().getButtonAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_1__0__Impl
	rule__Event__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getRobot_detects_stimulusKeyword_1_0()); }
	'robot_detects_stimulus:'
	{ after(grammarAccess.getEventAccess().getRobot_detects_stimulusKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getStimulusAssignment_1_1()); }
	(rule__Event__StimulusAssignment_1_1)
	{ after(grammarAccess.getEventAccess().getStimulusAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_2__0__Impl
	rule__Event__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getProximity_sensor_is_activatedKeyword_2_0()); }
	'proximity_sensor_is_activated:'
	{ after(grammarAccess.getEventAccess().getProximity_sensor_is_activatedKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getProxSensorAssignment_2_1()); }
	(rule__Event__ProxSensorAssignment_2_1)
	{ after(grammarAccess.getEventAccess().getProxSensorAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_3__0__Impl
	rule__Event__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getBottom_sensor_detects_colorKeyword_3_0()); }
	'bottom_sensor_detects_color:'
	{ after(grammarAccess.getEventAccess().getBottom_sensor_detects_colorKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getBottomSensorAssignment_3_1()); }
	(rule__Event__BottomSensorAssignment_3_1)
	{ after(grammarAccess.getEventAccess().getBottomSensorAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProxSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group__0__Impl
	rule__ProxSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getProxSensorAction_0()); }
	()
	{ after(grammarAccess.getProxSensorAccess().getProxSensorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group__1__Impl
	rule__ProxSensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getGroup_1()); }
	(rule__ProxSensor__Group_1__0)?
	{ after(grammarAccess.getProxSensorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group__2__Impl
	rule__ProxSensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getGroup_2()); }
	(rule__ProxSensor__Group_2__0)?
	{ after(grammarAccess.getProxSensorAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group__3__Impl
	rule__ProxSensor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getGroup_3()); }
	(rule__ProxSensor__Group_3__0)?
	{ after(grammarAccess.getProxSensorAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group__4__Impl
	rule__ProxSensor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getGroup_4()); }
	(rule__ProxSensor__Group_4__0)?
	{ after(grammarAccess.getProxSensorAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group__5__Impl
	rule__ProxSensor__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getGroup_5()); }
	(rule__ProxSensor__Group_5__0)?
	{ after(grammarAccess.getProxSensorAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group__6__Impl
	rule__ProxSensor__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getGroup_6()); }
	(rule__ProxSensor__Group_6__0)?
	{ after(grammarAccess.getProxSensorAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getGroup_7()); }
	(rule__ProxSensor__Group_7__0)?
	{ after(grammarAccess.getProxSensorAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProxSensor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_1__0__Impl
	rule__ProxSensor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getFront_leftKeyword_1_0()); }
	'front_left:'
	{ after(grammarAccess.getProxSensorAccess().getFront_leftKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getFrontLeftSensorAssignment_1_1()); }
	(rule__ProxSensor__FrontLeftSensorAssignment_1_1)
	{ after(grammarAccess.getProxSensorAccess().getFrontLeftSensorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProxSensor__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_2__0__Impl
	rule__ProxSensor__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getFront_center_leftKeyword_2_0()); }
	'front_center_left:'
	{ after(grammarAccess.getProxSensorAccess().getFront_center_leftKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getFrontCenterLeftSensorAssignment_2_1()); }
	(rule__ProxSensor__FrontCenterLeftSensorAssignment_2_1)
	{ after(grammarAccess.getProxSensorAccess().getFrontCenterLeftSensorAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProxSensor__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_3__0__Impl
	rule__ProxSensor__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getFront_centerKeyword_3_0()); }
	'front_center:'
	{ after(grammarAccess.getProxSensorAccess().getFront_centerKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getFrontCenterSensorAssignment_3_1()); }
	(rule__ProxSensor__FrontCenterSensorAssignment_3_1)
	{ after(grammarAccess.getProxSensorAccess().getFrontCenterSensorAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProxSensor__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_4__0__Impl
	rule__ProxSensor__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getFront_center_rightKeyword_4_0()); }
	'front_center_right:'
	{ after(grammarAccess.getProxSensorAccess().getFront_center_rightKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getFrontCenterRightSensorAssignment_4_1()); }
	(rule__ProxSensor__FrontCenterRightSensorAssignment_4_1)
	{ after(grammarAccess.getProxSensorAccess().getFrontCenterRightSensorAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProxSensor__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_5__0__Impl
	rule__ProxSensor__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getFront_rightKeyword_5_0()); }
	'front_right:'
	{ after(grammarAccess.getProxSensorAccess().getFront_rightKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getFrontRightSensorAssignment_5_1()); }
	(rule__ProxSensor__FrontRightSensorAssignment_5_1)
	{ after(grammarAccess.getProxSensorAccess().getFrontRightSensorAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProxSensor__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_6__0__Impl
	rule__ProxSensor__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getBack_leftKeyword_6_0()); }
	'back_left:'
	{ after(grammarAccess.getProxSensorAccess().getBack_leftKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getBackLeftSensorAssignment_6_1()); }
	(rule__ProxSensor__BackLeftSensorAssignment_6_1)
	{ after(grammarAccess.getProxSensorAccess().getBackLeftSensorAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProxSensor__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_7__0__Impl
	rule__ProxSensor__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getBack_rightKeyword_7_0()); }
	'back_right:'
	{ after(grammarAccess.getProxSensorAccess().getBack_rightKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProxSensor__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProxSensorAccess().getBackRightSensorAssignment_7_1()); }
	(rule__ProxSensor__BackRightSensorAssignment_7_1)
	{ after(grammarAccess.getProxSensorAccess().getBackRightSensorAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BottomSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BottomSensor__Group__0__Impl
	rule__BottomSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BottomSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBottomSensorAccess().getGroup_0()); }
	(rule__BottomSensor__Group_0__0)
	{ after(grammarAccess.getBottomSensorAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BottomSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BottomSensor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BottomSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBottomSensorAccess().getGroup_1()); }
	(rule__BottomSensor__Group_1__0)
	{ after(grammarAccess.getBottomSensorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BottomSensor__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BottomSensor__Group_0__0__Impl
	rule__BottomSensor__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BottomSensor__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBottomSensorAccess().getLeftKeyword_0_0()); }
	'left:'
	{ after(grammarAccess.getBottomSensorAccess().getLeftKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BottomSensor__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BottomSensor__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BottomSensor__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBottomSensorAccess().getBottomLeftSensorAssignment_0_1()); }
	(rule__BottomSensor__BottomLeftSensorAssignment_0_1)
	{ after(grammarAccess.getBottomSensorAccess().getBottomLeftSensorAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BottomSensor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BottomSensor__Group_1__0__Impl
	rule__BottomSensor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BottomSensor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBottomSensorAccess().getRightKeyword_1_0()); }
	'right:'
	{ after(grammarAccess.getBottomSensorAccess().getRightKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BottomSensor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BottomSensor__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BottomSensor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBottomSensorAccess().getBottomRightSensorAssignment_1_1()); }
	(rule__BottomSensor__BottomRightSensorAssignment_1_1)
	{ after(grammarAccess.getBottomSensorAccess().getBottomRightSensorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_0__0__Impl
	rule__Action__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getMoveKeyword_0_0()); }
	'move:'
	{ after(grammarAccess.getActionAccess().getMoveKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getMoveAssignment_0_1()); }
	(rule__Action__MoveAssignment_0_1)
	{ after(grammarAccess.getActionAccess().getMoveAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_1__0__Impl
	rule__Action__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getLightsKeyword_1_0()); }
	'lights:'
	{ after(grammarAccess.getActionAccess().getLightsKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getLightAssignment_1_1()); }
	(rule__Action__LightAssignment_1_1)
	{ after(grammarAccess.getActionAccess().getLightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_2__0__Impl
	rule__Action__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getSoundKeyword_2_0()); }
	'sound:'
	{ after(grammarAccess.getActionAccess().getSoundKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getActionAccess().getSoundAssignment_2_1()); }
		(rule__Action__SoundAssignment_2_1)
		{ after(grammarAccess.getActionAccess().getSoundAssignment_2_1()); }
	)
	(
		{ before(grammarAccess.getActionAccess().getSoundAssignment_2_1()); }
		(rule__Action__SoundAssignment_2_1)*
		{ after(grammarAccess.getActionAccess().getSoundAssignment_2_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Motors__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Motors__Group__0__Impl
	rule__Motors__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Motors__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMotorsAccess().getLeft_motorKeyword_0()); }
	'left_motor:'
	{ after(grammarAccess.getMotorsAccess().getLeft_motorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motors__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Motors__Group__1__Impl
	rule__Motors__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Motors__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMotorsAccess().getLeftAssignment_1()); }
	(rule__Motors__LeftAssignment_1)
	{ after(grammarAccess.getMotorsAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motors__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Motors__Group__2__Impl
	rule__Motors__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Motors__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMotorsAccess().getRight_motorKeyword_2()); }
	'right_motor:'
	{ after(grammarAccess.getMotorsAccess().getRight_motorKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motors__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Motors__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Motors__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMotorsAccess().getRightAssignment_3()); }
	(rule__Motors__RightAssignment_3)
	{ after(grammarAccess.getMotorsAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lights__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lights__Group__0__Impl
	rule__Lights__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightsAccess().getLightsAction_0()); }
	()
	{ after(grammarAccess.getLightsAccess().getLightsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lights__Group__1__Impl
	rule__Lights__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightsAccess().getGroup_1()); }
	(rule__Lights__Group_1__0)
	{ after(grammarAccess.getLightsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lights__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightsAccess().getGroup_2()); }
	(rule__Lights__Group_2__0)
	{ after(grammarAccess.getLightsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lights__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lights__Group_1__0__Impl
	rule__Lights__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightsAccess().getTop_lightKeyword_1_0()); }
	'top_light:'
	{ after(grammarAccess.getLightsAccess().getTop_lightKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lights__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightsAccess().getAlternatives_1_1()); }
	(rule__Lights__Alternatives_1_1)
	{ after(grammarAccess.getLightsAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lights__Group_1_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lights__Group_1_1_0__0__Impl
	rule__Lights__Group_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_1_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightsAccess().getOnKeyword_1_1_0_0()); }
	'on'
	{ after(grammarAccess.getLightsAccess().getOnKeyword_1_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_1_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lights__Group_1_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_1_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightsAccess().getTopLightAssignment_1_1_0_1()); }
	(rule__Lights__TopLightAssignment_1_1_0_1)
	{ after(grammarAccess.getLightsAccess().getTopLightAssignment_1_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lights__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lights__Group_2__0__Impl
	rule__Lights__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightsAccess().getBottom_lightKeyword_2_0()); }
	'bottom_light:'
	{ after(grammarAccess.getLightsAccess().getBottom_lightKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lights__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightsAccess().getAlternatives_2_1()); }
	(rule__Lights__Alternatives_2_1)
	{ after(grammarAccess.getLightsAccess().getAlternatives_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lights__Group_2_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lights__Group_2_1_0__0__Impl
	rule__Lights__Group_2_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_2_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightsAccess().getOnKeyword_2_1_0_0()); }
	'on'
	{ after(grammarAccess.getLightsAccess().getOnKeyword_2_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_2_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lights__Group_2_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__Group_2_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightsAccess().getBottomLightAssignment_2_1_0_1()); }
	(rule__Lights__BottomLightAssignment_2_1_0_1)
	{ after(grammarAccess.getLightsAccess().getBottomLightAssignment_2_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RGB__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RGB__Group__0__Impl
	rule__RGB__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRGBAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getRGBAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RGB__Group__1__Impl
	rule__RGB__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRGBAccess().getRedAssignment_1()); }
	(rule__RGB__RedAssignment_1)
	{ after(grammarAccess.getRGBAccess().getRedAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RGB__Group__2__Impl
	rule__RGB__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRGBAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getRGBAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RGB__Group__3__Impl
	rule__RGB__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRGBAccess().getGreenAssignment_3()); }
	(rule__RGB__GreenAssignment_3)
	{ after(grammarAccess.getRGBAccess().getGreenAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RGB__Group__4__Impl
	rule__RGB__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRGBAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getRGBAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RGB__Group__5__Impl
	rule__RGB__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRGBAccess().getBlueAssignment_5()); }
	(rule__RGB__BlueAssignment_5)
	{ after(grammarAccess.getRGBAccess().getBlueAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RGB__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRGBAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getRGBAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sound__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group__0__Impl
	rule__Sound__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getNoteKeyword_0()); }
	'note:'
	{ after(grammarAccess.getSoundAccess().getNoteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group__1__Impl
	rule__Sound__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getPitchAssignment_1()); }
	(rule__Sound__PitchAssignment_1)
	{ after(grammarAccess.getSoundAccess().getPitchAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getDurationAssignment_2()); }
	(rule__Sound__DurationAssignment_2)
	{ after(grammarAccess.getSoundAccess().getDurationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
	(rule__Addition__OperatorAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getNumberParserRuleCall_0()); }
	ruleNumber
	{ after(grammarAccess.getMultiplicationAccess().getNumberParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
	(rule__Multiplication__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1__0__Impl
	rule__Number__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getNumberAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1__1__Impl
	rule__Number__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getAdditionParserRuleCall_1_1()); }
	ruleAddition
	{ after(grammarAccess.getNumberAccess().getAdditionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getNumberAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ProceduresAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProceduresProcedureParserRuleCall_0()); }
		ruleProcedure
		{ after(grammarAccess.getModelAccess().getProceduresProcedureParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getProcedureAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__EventsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getEventsEventParserRuleCall_3_0()); }
		ruleEvent
		{ after(grammarAccess.getProcedureAccess().getEventsEventParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__ActionsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getActionsActionParserRuleCall_5_0()); }
		ruleAction
		{ after(grammarAccess.getProcedureAccess().getActionsActionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ButtonAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getButtonOrtogonalParserRuleCall_0_1_0()); }
		ruleOrtogonal
		{ after(grammarAccess.getEventAccess().getButtonOrtogonalParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__StimulusAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getStimulusStimulusParserRuleCall_1_1_0()); }
		ruleStimulus
		{ after(grammarAccess.getEventAccess().getStimulusStimulusParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ProxSensorAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getProxSensorProxSensorParserRuleCall_2_1_0()); }
		ruleProxSensor
		{ after(grammarAccess.getEventAccess().getProxSensorProxSensorParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__BottomSensorAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getBottomSensorBottomSensorParserRuleCall_3_1_0()); }
		ruleBottomSensor
		{ after(grammarAccess.getEventAccess().getBottomSensorBottomSensorParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__FrontLeftSensorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProxSensorAccess().getFrontLeftSensorSensorStatusParserRuleCall_1_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getProxSensorAccess().getFrontLeftSensorSensorStatusParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__FrontCenterLeftSensorAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProxSensorAccess().getFrontCenterLeftSensorSensorStatusParserRuleCall_2_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getProxSensorAccess().getFrontCenterLeftSensorSensorStatusParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__FrontCenterSensorAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProxSensorAccess().getFrontCenterSensorSensorStatusParserRuleCall_3_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getProxSensorAccess().getFrontCenterSensorSensorStatusParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__FrontCenterRightSensorAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProxSensorAccess().getFrontCenterRightSensorSensorStatusParserRuleCall_4_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getProxSensorAccess().getFrontCenterRightSensorSensorStatusParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__FrontRightSensorAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProxSensorAccess().getFrontRightSensorSensorStatusParserRuleCall_5_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getProxSensorAccess().getFrontRightSensorSensorStatusParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__BackLeftSensorAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProxSensorAccess().getBackLeftSensorSensorStatusParserRuleCall_6_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getProxSensorAccess().getBackLeftSensorSensorStatusParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProxSensor__BackRightSensorAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProxSensorAccess().getBackRightSensorSensorStatusParserRuleCall_7_1_0()); }
		ruleSensorStatus
		{ after(grammarAccess.getProxSensorAccess().getBackRightSensorSensorStatusParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BottomSensor__BottomLeftSensorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBottomSensorAccess().getBottomLeftSensorBlackWhiteParserRuleCall_0_1_0()); }
		ruleBlackWhite
		{ after(grammarAccess.getBottomSensorAccess().getBottomLeftSensorBlackWhiteParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BottomSensor__BottomRightSensorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBottomSensorAccess().getBottomRightSensorBlackWhiteParserRuleCall_1_1_0()); }
		ruleBlackWhite
		{ after(grammarAccess.getBottomSensorAccess().getBottomRightSensorBlackWhiteParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__MoveAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getMoveMotorsParserRuleCall_0_1_0()); }
		ruleMotors
		{ after(grammarAccess.getActionAccess().getMoveMotorsParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__LightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getLightLightsParserRuleCall_1_1_0()); }
		ruleLights
		{ after(grammarAccess.getActionAccess().getLightLightsParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__SoundAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getSoundSoundParserRuleCall_2_1_0()); }
		ruleSound
		{ after(grammarAccess.getActionAccess().getSoundSoundParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motors__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMotorsAccess().getLeftAdditionParserRuleCall_1_0()); }
		ruleAddition
		{ after(grammarAccess.getMotorsAccess().getLeftAdditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Motors__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMotorsAccess().getRightAdditionParserRuleCall_3_0()); }
		ruleAddition
		{ after(grammarAccess.getMotorsAccess().getRightAdditionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__TopLightAssignment_1_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightsAccess().getTopLightRGBParserRuleCall_1_1_0_1_0()); }
		ruleRGB
		{ after(grammarAccess.getLightsAccess().getTopLightRGBParserRuleCall_1_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lights__BottomLightAssignment_2_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightsAccess().getBottomLightRGBParserRuleCall_2_1_0_1_0()); }
		ruleRGB
		{ after(grammarAccess.getLightsAccess().getBottomLightRGBParserRuleCall_2_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__RedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRGBAccess().getRedAdditionParserRuleCall_1_0()); }
		ruleAddition
		{ after(grammarAccess.getRGBAccess().getRedAdditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__GreenAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRGBAccess().getGreenAdditionParserRuleCall_3_0()); }
		ruleAddition
		{ after(grammarAccess.getRGBAccess().getGreenAdditionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RGB__BlueAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRGBAccess().getBlueAdditionParserRuleCall_5_0()); }
		ruleAddition
		{ after(grammarAccess.getRGBAccess().getBlueAdditionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__PitchAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoundAccess().getPitchAdditionParserRuleCall_1_0()); }
		ruleAddition
		{ after(grammarAccess.getSoundAccess().getPitchAdditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__DurationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoundAccess().getDurationNoteDurationParserRuleCall_2_0()); }
		ruleNoteDuration
		{ after(grammarAccess.getSoundAccess().getDurationNoteDurationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Addition__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Multiplication__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightNumberParserRuleCall_1_2_0()); }
		ruleNumber
		{ after(grammarAccess.getMultiplicationAccess().getRightNumberParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getValueEIntParserRuleCall_0_0()); }
		ruleEInt
		{ after(grammarAccess.getNumberAccess().getValueEIntParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
