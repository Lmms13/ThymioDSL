package ld.project2.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(ThymioDSLInjectorProvider.class)
@SuppressWarnings("all")
public class ThymioDSLCodeGenTest {
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;

  @Test
  public void testValidThymioFile1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Procedure: steer_right");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bottom_sensor_detects_color: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left: white");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right: black\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("lights:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("top_light: on (16*(20/(5+5)),0,0)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bottom_light: on (0,0,16*(20/(5+5)))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 0");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("Procedure: steer_left");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bottom_sensor_detects_color: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left: black");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right: white\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("lights:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("top_light: on (0,0,16*(20/(5+5)))");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bottom_light: on (16*(20/(5+5)),0,0)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 500");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("Procedure: follow_line");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bottom_sensor_detects_color: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left: black");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right: black\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("lights:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("top_light: on (0,16*(20/(5+5)),0)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bottom_light: on (0,16*(20/(5+5)),0)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("Procedure: u_turn");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bottom_sensor_detects_color: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left: white");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right: white\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("Procedure: stop");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("button_is_clicked: center");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 641798 * 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 641798 * 0");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("var notes[6]");
      _builder_1.newLine();
      _builder_1.append("var durations[6]");
      _builder_1.newLine();
      _builder_1.append("var note_index = 6");
      _builder_1.newLine();
      _builder_1.append("var note_count = 6");
      _builder_1.newLine();
      _builder_1.append("var wave[142]");
      _builder_1.newLine();
      _builder_1.append("var i");
      _builder_1.newLine();
      _builder_1.append("var wave_phase");
      _builder_1.newLine();
      _builder_1.append("var wave_intensity");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# setup threshold for detecting claps");
      _builder_1.newLine();
      _builder_1.append("mic.threshold = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# reset outputs");
      _builder_1.newLine();
      _builder_1.append("call sound.system(-1)");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.circle(0,0,0,0,0,0,0,0)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# when a note is finished, play the next note");
      _builder_1.newLine();
      _builder_1.append("onevent sound.finished");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if note_index != note_count then");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("call sound.freq(notes[note_index], durations[note_index])");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("note_index += 1");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("onevent buttons");
      _builder_1.newLine();
      _builder_1.append("when button.center== 1 do");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 0");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 0");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent prox");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.ground.delta[0] >= 450 and prox.ground.delta[1] <= 400 do");
      _builder_1.newLine();
      _builder_1.append("call leds.top(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 0");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.ground.delta[0] <= 400 and prox.ground.delta[1] >= 450 do");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 0");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 500");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.ground.delta[0] <= 400 and prox.ground.delta[1] <= 400 do");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,32,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,32,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,32,0)");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 500");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.ground.delta[0] >= 450 and prox.ground.delta[1] >= 450 do");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 0");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent tap");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent mic");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testValidThymioFile2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Procedure: steer_right");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bottom_sensor_detects_color: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left: white");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right: black\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("lights:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("top_light: on (16*(20/(5+5)),0,0)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bottom_light: on (0,0,16*(20/(5+5)))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 0");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("Procedure: steer_left");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bottom_sensor_detects_color: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left: black");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right: white\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("lights:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("top_light: on (0,0,16*(20/(5+5)))");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bottom_light: on (16*(20/(5+5)),0,0)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 500");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("Procedure: follow_line");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bottom_sensor_detects_color: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left: black");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right: black\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("lights:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("top_light: on (0,16*(20/(5+5)),0)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bottom_light: on (0,16*(20/(5+5)),0)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("Procedure: u_turn");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bottom_sensor_detects_color: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left: white");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right: white\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("Procedure: stop");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("button_is_clicked: center");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 641798 * 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 641798 * 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("Procedure: detect_left_wall");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("proximity_sensor_is_activated: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_left: close");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_center_left: close");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_center: close");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 0");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("lights:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("top_light: on (0, 0, 32)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bottom_light: on (0, 0, 32)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("Procedure: detect_near_left_wall");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("proximity_sensor_is_activated: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_left: very_close");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_center_left: very_close");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_center: very_close");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: -500");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("lights:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("top_light: on (32, 0, 0)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bottom_light: on (32, 0, 0)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("Procedure: detect_right_wall");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("proximity_sensor_is_activated: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_center: close");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_center_right: close");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_right: close ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 500");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("lights:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("top_light: on (0, 0, 32)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bottom_light: on (0, 0, 32)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("Procedure: detect_near_right_wall");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event: ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("proximity_sensor_is_activated: ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_center: very_close");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_center_right: very_close");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("front_right: very_close");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: -500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 500");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("lights:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("top_light: on (32, 0, 0)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bottom_light: on (32, 0, 0)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("Procedure: force_right_turn");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("button_is_clicked: right");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: -500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("Procedure: force_left_turn");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("button_is_clicked: right");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: -500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: 500");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("Procedure: force_reverse");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("button_is_clicked: down");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("move:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("left_motor: -250*2");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("right_motor: -100*5");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Procedure: turn_lights_off");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("robot_detects_stimulus: tap");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("lights:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("top_light: off");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bottom_light: off");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Procedure: play_music");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Event:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("robot_detects_stimulus: sound");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Actions:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("sound:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("note: 5 long");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("note: 2*2 short");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("note: 3000/(500+500) long");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("note: 0 long");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("note: 1+1 short");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("note: -1*-1 long");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("var notes[6]");
      _builder_1.newLine();
      _builder_1.append("var durations[6]");
      _builder_1.newLine();
      _builder_1.append("var note_index = 6");
      _builder_1.newLine();
      _builder_1.append("var note_count = 6");
      _builder_1.newLine();
      _builder_1.append("var wave[142]");
      _builder_1.newLine();
      _builder_1.append("var i");
      _builder_1.newLine();
      _builder_1.append("var wave_phase");
      _builder_1.newLine();
      _builder_1.append("var wave_intensity");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# setup threshold for detecting claps");
      _builder_1.newLine();
      _builder_1.append("mic.threshold = 250");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# reset outputs");
      _builder_1.newLine();
      _builder_1.append("call sound.system(-1)");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.circle(0,0,0,0,0,0,0,0)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# when a note is finished, play the next note");
      _builder_1.newLine();
      _builder_1.append("onevent sound.finished");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if note_index != note_count then");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("call sound.freq(notes[note_index], durations[note_index])");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("note_index += 1");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("onevent buttons");
      _builder_1.newLine();
      _builder_1.append("when button.center== 1 do");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 0");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 0");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("when button.right== 1 do");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = -500");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("when button.right== 1 do");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = -500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 500");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("when button.backward== 1 do");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = -500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = -500");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent prox");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.ground.delta[0] >= 450 and prox.ground.delta[1] <= 400 do");
      _builder_1.newLine();
      _builder_1.append("call leds.top(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 0");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.ground.delta[0] <= 400 and prox.ground.delta[1] >= 450 do");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 0");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 500");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.ground.delta[0] <= 400 and prox.ground.delta[1] <= 400 do");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,32,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,32,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,32,0)");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 500");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.ground.delta[0] >= 450 and prox.ground.delta[1] >= 450 do");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 0");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.horizontal[0] <= 1000 and prox.horizontal[1] <= 1000 and prox.horizontal[2] <= 1000 do");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 0");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.horizontal[0] >= 2000 and prox.horizontal[1] >= 2000 and prox.horizontal[2] >= 2000 do");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = -500");
      _builder_1.newLine();
      _builder_1.append("call leds.top(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.horizontal[2] <= 1000 and prox.horizontal[3] <= 1000 and prox.horizontal[4] <= 1000 do");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = 0");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 500");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,0,32)");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("when prox.horizontal[2] >= 2000 and prox.horizontal[3] >= 2000 and prox.horizontal[4] >= 2000 do");
      _builder_1.newLine();
      _builder_1.append("motor.left.target = -500");
      _builder_1.newLine();
      _builder_1.append("motor.right.target = 500");
      _builder_1.newLine();
      _builder_1.append("call leds.top(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(32,0,0)");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent tap");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,0,0)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("onevent mic");
      _builder_1.newLine();
      _builder_1.append("call math.copy(notes[0:5], [524, 440, 370, 0, 311, 262])");
      _builder_1.newLine();
      _builder_1.append("call math.copy(notes[0:5], [14, 7, 14, 14, 7, 14])");
      _builder_1.newLine();
      _builder_1.append("note_index = 1");
      _builder_1.newLine();
      _builder_1.append("note_count = 6");
      _builder_1.newLine();
      _builder_1.append("call sound.freq(notes[0], durations[0])");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
