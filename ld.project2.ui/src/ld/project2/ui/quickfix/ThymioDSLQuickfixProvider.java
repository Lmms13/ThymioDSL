/*
 * generated by Xtext 2.34.0
 */
package ld.project2.ui.quickfix;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;

import ld.project2.thymioDSL.Action;
import ld.project2.thymioDSL.Addition;
import ld.project2.thymioDSL.Model;
import ld.project2.thymioDSL.Motors;
import ld.project2.thymioDSL.Multiplication;
import ld.project2.thymioDSL.Procedure;
import ld.project2.thymioDSL.RGB;
import ld.project2.thymioDSL.Sound;
import ld.project2.thymioDSL.ThymioDSLFactory;
import ld.project2.thymioDSL.impl.ExpressionImpl;
import ld.project2.thymioDSL.Expression;
import ld.project2.validation.ThymioDSLValidator;

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
public class ThymioDSLQuickfixProvider extends DefaultQuickfixProvider {
	
	@Fix(ThymioDSLValidator.INVALID_RGB_RED)
	public void fixRedRGB(final Issue issue, IssueResolutionAcceptor acceptor) {
		int value = Integer.valueOf(issue.getData()[0]);

		acceptor.accept(issue
				, "Fix red value of RGB"
				, "Fix red value of RGB"
				, null
				, new ISemanticModification() {

			@Override
			public void apply(EObject element, IModificationContext context) throws Exception {
				RGB rgb = ((RGB) element);

				Expression exp = ThymioDSLFactory.eINSTANCE.createExpression();
				if(value < 0) {
					exp.setValue(0);
				}
				else {
					exp.setValue(32);
				}
				rgb.setRed(exp);
			}
		});
	}
	
	@Fix(ThymioDSLValidator.INVALID_RGB_GREEN)
	public void fixGreenRGB(final Issue issue, IssueResolutionAcceptor acceptor) {
		int value = Integer.valueOf(issue.getData()[0]);

		acceptor.accept(issue
				, "Fix green value of RGB"
				, "Fix green value of RGB"
				, null
				, new ISemanticModification() {

			@Override
			public void apply(EObject element, IModificationContext context) throws Exception {
				RGB rgb = ((RGB) element);

				Expression exp = ThymioDSLFactory.eINSTANCE.createExpression();
				if(value < 0) {
					exp.setValue(0);
				}
				else {
					exp.setValue(32);
				}
				rgb.setGreen(exp);

			}
		});
	}
	
	@Fix(ThymioDSLValidator.INVALID_RGB_BLUE)
	public void fixBlueRGB(final Issue issue, IssueResolutionAcceptor acceptor) {
		int value = Integer.valueOf(issue.getData()[0]);

		acceptor.accept(issue
				, "Fix blue value of RGB"
				, "Fix blue value of RGB"
				, null
				, new ISemanticModification() {

			@Override
			public void apply(EObject element, IModificationContext context) throws Exception {
				RGB rgb = ((RGB) element);

				Expression exp = ThymioDSLFactory.eINSTANCE.createExpression();
				if(value < 0) {
					exp.setValue(0);
				}
				else {
					exp.setValue(32);
				}
				rgb.setBlue(exp);

			}
		});
	}
	
	@Fix(ThymioDSLValidator.INVALID_MOTORS_LEFT)
	public void fixLeftMotor(final Issue issue, IssueResolutionAcceptor acceptor) {
		int value = Integer.valueOf(issue.getData()[0]);

		acceptor.accept(issue
				, "Fix value of left motor"
				, "Fix value of left motor"
				, null
				, new ISemanticModification() {

			@Override
			public void apply(EObject element, IModificationContext context) throws Exception {
				Motors motors = ((Motors) element);

				Expression exp = ThymioDSLFactory.eINSTANCE.createExpression();
				if(value < -500) {
					exp.setValue(-500);
				}
				else {
					exp.setValue(500);
				}
				motors.setLeft(exp);
			}
		});
	}
	
	@Fix(ThymioDSLValidator.INVALID_MOTORS_RIGHT)
	public void fixRightMotor(final Issue issue, IssueResolutionAcceptor acceptor) {
		int value = Integer.valueOf(issue.getData()[0]);

		acceptor.accept(issue
				, "Fix value of right motor"
				, "Fix value of right motor"
				, null
				, new ISemanticModification() {

			@Override
			public void apply(EObject element, IModificationContext context) throws Exception {
				Motors motors = ((Motors) element);

				Expression exp = ThymioDSLFactory.eINSTANCE.createExpression();
				if(value < -500) {
					exp.setValue(-500);
				}
				else {
					exp.setValue(500);
				}
				motors.setRight(exp);
			}
		});
	}
	
	@Fix(ThymioDSLValidator.DUPLICATE_ACTIONS)
	public void fixDuplicateActions(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue
				, "Remove duplicate action"
				, "Remove duplicate action"
				, null
				, new ISemanticModification() {

			@Override
			public void apply(EObject element, IModificationContext context) throws Exception {
				Action action = ((Action) element);
				Procedure procedure = (Procedure) element.eContainer();
				
				procedure.getActions().remove(action);
			}
		});
	}
	
	@Fix(ThymioDSLValidator.NOTE_LIMIT_REACHED)
	public void fixNoteLimit(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue
				, "Remove extra notes"
				, "Remove extra notes"
				, null
				, new ISemanticModification() {

			@Override
			public void apply(EObject element, IModificationContext context) throws Exception {
				Action action = ((Action) element);
				
				int size = action.getSound().size();
				for(int i = size - 1; i >= 0; i--) {
					if(i > 5) {
						action.getSound().remove(i);
					}
				}
			}
		});
	}
	
	@Fix(ThymioDSLValidator.INVALID_PITCH)
	public void fixPitch(final Issue issue, IssueResolutionAcceptor acceptor) {
		int value = Integer.valueOf(issue.getData()[0]);

		acceptor.accept(issue
				, "Fix pitch of note"
				, "Fix pitch of note"
				, null
				, new ISemanticModification() {

			@Override
			public void apply(EObject element, IModificationContext context) throws Exception {
				Sound sound = ((Sound) element);

				Expression exp = ThymioDSLFactory.eINSTANCE.createExpression();
				if(value < 0) {
					exp.setValue(0);
				}
				else {
					exp.setValue(5);
				}
				sound.setPitch(exp);
			}
		});
	}
	
	@Fix(ThymioDSLValidator.DUPLICATE_PROCEDURE)
	public void fixDuplicateProcedure(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue
				, "Remove duplicate procedure"
				, "Remove duplicate procedure"
				, null
				, new ISemanticModification() {

			@Override
			public void apply(EObject element, IModificationContext context) throws Exception {
				Procedure procedure = ((Procedure) element);
				Model model = (Model) element.eContainer();
				
				model.getProcedures().remove(procedure);
			}
		});
	}

}
